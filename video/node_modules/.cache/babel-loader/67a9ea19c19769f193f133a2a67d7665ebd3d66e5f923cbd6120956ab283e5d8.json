{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msado\\\\OneDrive\\\\Pulpit\\\\video-stream\\\\video\\\\src\\\\components\\\\VideoPlayer.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n\n// const VideoPlayer = () => {\n//   const videoRef = useRef(null);\n//   const websocketRef = useRef(null);\n//   const videoChunksRef = useRef([]); // To store received video chunks\n//   console.log(videoChunksRef)\n//   const [videoURL, setVideoURL] = useState(null);\n// console.log(videoURL)\n//   useEffect(() => {\n//     // Create a WebSocket connection\n//     // const socket = new WebSocket(\"ws://192.168.0.185:8080\");\n//     const socket =new WebSocket('ws://192.168.0.186:33333')\n\n//     socket.onopen = () => {\n//       socket.send(\"Message to send\");\n//       console.log(\"Connected to server\");\n//     };\n\n//     socket.onmessage = (event) => {\n//       // Receive video data from the server\n//       const data = event.data;\n\n//       const fileReader = new FileReader();\n//       // Set up the onload event to handle the result when it's ready\n//       fileReader.onload = function(event) {\n//         // The result contains the Base64 encoded data\n//         const base64Datas = event.target.result;\n//         const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\n//         console.log(base64Datas)\n//         const binaryData = atob(base64Data);\n\n//         // Convert the binary data to a Uint8Array buffer\n//         const arrayBuffer = new Uint8Array(binaryData.length);\n//         for (let i = 0; i < binaryData.length; i++) {\n//           arrayBuffer[i] = binaryData.charCodeAt(i);\n//         }\n\n//         // Store the received chunk in the videoChunksRef\n//         videoChunksRef.current.push(arrayBuffer);\n\n//         // Combine all the chunks into a single Uint8Array buffer\n//         const combinedBuffer = new Uint8Array(videoChunksRef.current.reduce((totalLength, chunk) => totalLength + chunk.length, 0));\n//         let offset = 0;\n//         videoChunksRef.current.forEach(chunk => {\n//           combinedBuffer.set(chunk, offset);\n//           offset += chunk.length;\n//         });\n\n//         // Create a Blob from the combined Uint8Array buffer\n//         const videoBlob = new Blob([combinedBuffer], { type: 'video/mp4' });\n//         console.log(videoBlob.type)\n\n//         // Create an object URL from the Blob\n//         const videoURL = URL.createObjectURL(videoBlob);\n\n//         // Set the video URL state\n//         setVideoURL(videoURL);\n//       };\n\n//       // Read the Blob data as Base64\n//       fileReader.readAsDataURL(data);\n//     };\n\n//     socket.onclose = () => {\n//       console.log(\"Disconnected from server\");\n//     };\n\n//     websocketRef.current = socket;\n\n//     return () => {\n//       // Clean up the WebSocket connection\n//       websocketRef.current.close();\n//     };\n//   }, []);\n\n//   const handlePlayVideo = () => {\n//     if (videoURL) {\n//       // Play the video if the URL is available\n//       videoRef.current.src = videoURL;\n//       videoRef.current.play()\n//         .catch(error => {\n//           console.error(\"Error while playing video:\", error);\n//         });\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* Video element with controls */}\n//       <video ref={videoRef} controls />\n\n//       {/* Play button */}\n//       <button onClick={handlePlayVideo}>Play Video</button>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n// //////////////////////////////////\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const videoRef = useRef(null);\n  const websocketRef = useRef(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [arr, setArr] = useState(null);\n  /////////////////// decoding base-64\n  const binaryMessage = \"\";\n  useEffect(() => {\n    if (videoRef.current && base64Data) {\n      const base64Data = btoa(binaryMessage);\n      // setBase64Data(base64Data);\n      // Decode the base64 data\n      console.log(base64Data);\n      const binaryData = atob(base64Data);\n      // Convert the binary data to a Uint8Array buffer\n      const arrayBuffer = new Uint8Array(binaryData.length);\n      for (let i = 0; i < binaryData.length; i++) {\n        arrayBuffer[i] = binaryData.charCodeAt(i);\n      }\n\n      // Create a Blob from the Uint8Array buffer\n      const videoBlob = new Blob([arrayBuffer], {\n        type: 'video/mp4'\n      });\n\n      // Create an object URL from the Blob\n      const videoURL = URL.createObjectURL(videoBlob);\n\n      // Set the video source to the object URL\n      videoRef.current.src = videoURL;\n\n      // Play the video\n      videoRef.current.play();\n    }\n  }, [base64Data]);\n  // ///////////////////////////////only websocket\n  // // useEffect(() => {\n  // //   // Create a WebSocket connection\n  // //   const socket = new WebSocket(\"ws://localhost:8080\");\n\n  // //   socket.onopen = () => {\n  // //     console.log(\"Connected to server\");\n  // //   };\n\n  // //   socket.onmessage = (event) => {\n  // //     // Receive video data from the server\n  // //     const data = event.data;\n  // //     videoRef.current.src = URL.createObjectURL(data);\n  // //   };\n\n  // //   socket.onclose = () => {\n  // //     console.log(\"Disconnected from server\");\n  // //   };\n\n  // //   websocketRef.current = socket;\n  // //   console.log({ socket });\n\n  // //   return () => {\n  // //     // Clean up the WebSocket connection\n  // //     websocketRef.current.close();\n  // //   };\n  // // }, []);\n  // //////////////////////with [arr] it plays first part video\n  // //   useEffect(() => {\n  // //     // Create a WebSocket connection\n  // //     const socket = new WebSocket(\"ws://localhost:8080\");\n\n  // //     socket.onopen = () => {\n  // //       console.log(\"Connected to server\");\n  // //     };\n\n  // //     socket.onmessage = (event) => {\n  // //       // Receive video data from the server\n  // //       const data = event.data;\n  // //       const fileReader = new FileReader();\n\n  // //       // Set up the onload event to handle the result when it's ready\n  // //       fileReader.onload = function(event) {\n  // //         // The result contains the Base64 encoded data\n  // //         const base64Datas = event.target.result;\n\n  // //         const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\n  // //         //  const base64Data = \"GkXfo6NChoEBQveBAULygQRC84EIQoKEd2VJKQg\"\n  // //         console.log(base64Data);\n  // //         const binaryData = atob(base64Data);\n  // // console.log(binaryData)\n  // //       // Convert the binary data to a Uint8Array buffer\n  // //       const arrayBuffer = new Uint8Array(binaryData.length);\n  // //       for (let i = 0; i < binaryData.length; i++) {\n  // //         arrayBuffer[i] = binaryData.charCodeAt(i);\n  // //       }\n  // //       setArr(arrayBuffer)\n  // //       // Create a Blob from the Uint8Array buffer\n  // //       const videoBlob = new Blob([arrayBuffer],  {type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'});\n\n  // //       // Create an object URL from the Blob\n  // //       const videoURL = URL.createObjectURL(videoBlob);\n\n  // //       setVideoURL(videoURL);\n  // //       // Set the video source to the object URL\n  // //       // videoRef.current.src = videoURL;\n\n  // //       // videoRef.current.play();\n\n  // //       };\n  // //       // Read the Blob data as Base64\n  // //       fileReader.readAsDataURL(data);\n  // //     };\n\n  // //     socket.onclose = () => {\n  // //       console.log(\"Disconnected from server\");\n  // //     };\n\n  // //     websocketRef.current = socket;\n\n  // //     return () => {\n  // //       // Clean up the WebSocket connection\n  // //       websocketRef.current.close();\n  // //     };\n  // //   }, [arr]);\n  const handlePlayVideo = () => {\n    if (videoURL) {\n      // Play the video if the URL is available\n      videoRef.current.src = videoURL;\n      videoRef.current.play().catch(error => {\n        console.error(\"Error while playing video:\", error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 6\n  }, this);\n};\n_s(VideoPlayer, \"FoOASlv4QGk/cRw08cH/y3lSM7I=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","VideoPlayer","_s","videoRef","websocketRef","videoURL","setVideoURL","arr","setArr","binaryMessage","current","base64Data","btoa","console","log","binaryData","atob","arrayBuffer","Uint8Array","length","i","charCodeAt","videoBlob","Blob","type","URL","createObjectURL","src","play","handlePlayVideo","catch","error","children","ref","controls","muted","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/msado/OneDrive/Pulpit/video-stream/video/src/components/VideoPlayer.jsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n// const VideoPlayer = () => {\r\n//   const videoRef = useRef(null);\r\n//   const websocketRef = useRef(null);\r\n//   const videoChunksRef = useRef([]); // To store received video chunks\r\n//   console.log(videoChunksRef)\r\n//   const [videoURL, setVideoURL] = useState(null);\r\n// console.log(videoURL)\r\n//   useEffect(() => {\r\n//     // Create a WebSocket connection\r\n//     // const socket = new WebSocket(\"ws://192.168.0.185:8080\");\r\n//     const socket =new WebSocket('ws://192.168.0.186:33333')\r\n\r\n\r\n//     socket.onopen = () => {\r\n//       socket.send(\"Message to send\");\r\n//       console.log(\"Connected to server\");\r\n//     };\r\n\r\n//     socket.onmessage = (event) => {\r\n//       // Receive video data from the server\r\n//       const data = event.data;\r\n      \r\n//       const fileReader = new FileReader();\r\n//       // Set up the onload event to handle the result when it's ready\r\n//       fileReader.onload = function(event) {\r\n//         // The result contains the Base64 encoded data\r\n//         const base64Datas = event.target.result;\r\n//         const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\r\n//         console.log(base64Datas)\r\n//         const binaryData = atob(base64Data);\r\n\r\n//         // Convert the binary data to a Uint8Array buffer\r\n//         const arrayBuffer = new Uint8Array(binaryData.length);\r\n//         for (let i = 0; i < binaryData.length; i++) {\r\n//           arrayBuffer[i] = binaryData.charCodeAt(i);\r\n//         }\r\n\r\n//         // Store the received chunk in the videoChunksRef\r\n//         videoChunksRef.current.push(arrayBuffer);\r\n\r\n//         // Combine all the chunks into a single Uint8Array buffer\r\n//         const combinedBuffer = new Uint8Array(videoChunksRef.current.reduce((totalLength, chunk) => totalLength + chunk.length, 0));\r\n//         let offset = 0;\r\n//         videoChunksRef.current.forEach(chunk => {\r\n//           combinedBuffer.set(chunk, offset);\r\n//           offset += chunk.length;\r\n//         });\r\n\r\n//         // Create a Blob from the combined Uint8Array buffer\r\n//         const videoBlob = new Blob([combinedBuffer], { type: 'video/mp4' });\r\n//         console.log(videoBlob.type)\r\n\r\n//         // Create an object URL from the Blob\r\n//         const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n//         // Set the video URL state\r\n//         setVideoURL(videoURL);\r\n//       };\r\n\r\n//       // Read the Blob data as Base64\r\n//       fileReader.readAsDataURL(data);\r\n//     };\r\n\r\n//     socket.onclose = () => {\r\n//       console.log(\"Disconnected from server\");\r\n//     };\r\n\r\n//     websocketRef.current = socket;\r\n\r\n//     return () => {\r\n//       // Clean up the WebSocket connection\r\n//       websocketRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const handlePlayVideo = () => {\r\n//     if (videoURL) {\r\n//       // Play the video if the URL is available\r\n//       videoRef.current.src = videoURL;\r\n//       videoRef.current.play()\r\n//         .catch(error => {\r\n//           console.error(\"Error while playing video:\", error);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* Video element with controls */}\r\n//       <video ref={videoRef} controls />\r\n\r\n//       {/* Play button */}\r\n//       <button onClick={handlePlayVideo}>Play Video</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoPlayer;\r\n// //////////////////////////////////\r\nimport React, { useEffect, useRef,useState } from \"react\";\r\n\r\nconst VideoPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  const websocketRef = useRef(null);\r\n  const [videoURL, setVideoURL] = useState(null);\r\n  const [arr, setArr] = useState(null);\r\n/////////////////// decoding base-64\r\nconst binaryMessage = \"\"\r\nuseEffect(() => {\r\n  if (videoRef.current && base64Data) {\r\n    const base64Data = btoa(binaryMessage);\r\n    // setBase64Data(base64Data);\r\n    // Decode the base64 data\r\n    console.log(base64Data)\r\n    const binaryData = atob(base64Data);\r\n    // Convert the binary data to a Uint8Array buffer\r\n    const arrayBuffer = new Uint8Array(binaryData.length);\r\n    for (let i = 0; i < binaryData.length; i++) {\r\n      arrayBuffer[i] = binaryData.charCodeAt(i);\r\n    }\r\n\r\n    // Create a Blob from the Uint8Array buffer\r\n    const videoBlob = new Blob([arrayBuffer], { type: 'video/mp4' });\r\n\r\n    // Create an object URL from the Blob\r\n    const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n    // Set the video source to the object URL\r\n    videoRef.current.src = videoURL;\r\n\r\n    // Play the video\r\n    videoRef.current.play();\r\n  }\r\n}, [base64Data]);\r\n// ///////////////////////////////only websocket\r\n// // useEffect(() => {\r\n// //   // Create a WebSocket connection\r\n// //   const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n// //   socket.onopen = () => {\r\n// //     console.log(\"Connected to server\");\r\n// //   };\r\n\r\n// //   socket.onmessage = (event) => {\r\n// //     // Receive video data from the server\r\n// //     const data = event.data;\r\n// //     videoRef.current.src = URL.createObjectURL(data);\r\n// //   };\r\n\r\n// //   socket.onclose = () => {\r\n// //     console.log(\"Disconnected from server\");\r\n// //   };\r\n\r\n// //   websocketRef.current = socket;\r\n// //   console.log({ socket });\r\n\r\n// //   return () => {\r\n// //     // Clean up the WebSocket connection\r\n// //     websocketRef.current.close();\r\n// //   };\r\n// // }, []);\r\n// //////////////////////with [arr] it plays first part video\r\n// //   useEffect(() => {\r\n// //     // Create a WebSocket connection\r\n// //     const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n// //     socket.onopen = () => {\r\n// //       console.log(\"Connected to server\");\r\n// //     };\r\n\r\n// //     socket.onmessage = (event) => {\r\n// //       // Receive video data from the server\r\n// //       const data = event.data;\r\n// //       const fileReader = new FileReader();\r\n\r\n// //       // Set up the onload event to handle the result when it's ready\r\n// //       fileReader.onload = function(event) {\r\n// //         // The result contains the Base64 encoded data\r\n// //         const base64Datas = event.target.result;\r\n\r\n// //         const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\r\n// //         //  const base64Data = \"GkXfo6NChoEBQveBAULygQRC84EIQoKEd2VJKQg\"\r\n// //         console.log(base64Data);\r\n// //         const binaryData = atob(base64Data);\r\n// // console.log(binaryData)\r\n// //       // Convert the binary data to a Uint8Array buffer\r\n// //       const arrayBuffer = new Uint8Array(binaryData.length);\r\n// //       for (let i = 0; i < binaryData.length; i++) {\r\n// //         arrayBuffer[i] = binaryData.charCodeAt(i);\r\n// //       }\r\n// //       setArr(arrayBuffer)\r\n// //       // Create a Blob from the Uint8Array buffer\r\n// //       const videoBlob = new Blob([arrayBuffer],  {type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'});\r\n\r\n// //       // Create an object URL from the Blob\r\n// //       const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n// //       setVideoURL(videoURL);\r\n// //       // Set the video source to the object URL\r\n// //       // videoRef.current.src = videoURL;\r\n\r\n// //       // videoRef.current.play();\r\n\r\n// //       };\r\n// //       // Read the Blob data as Base64\r\n// //       fileReader.readAsDataURL(data);\r\n// //     };\r\n\r\n// //     socket.onclose = () => {\r\n// //       console.log(\"Disconnected from server\");\r\n// //     };\r\n\r\n// //     websocketRef.current = socket;\r\n\r\n// //     return () => {\r\n// //       // Clean up the WebSocket connection\r\n// //       websocketRef.current.close();\r\n// //     };\r\n// //   }, [arr]);\r\n  const handlePlayVideo = () => {\r\n    if (videoURL) {\r\n      // Play the video if the URL is available\r\n      videoRef.current.src = videoURL;\r\n      videoRef.current.play()\r\n        .catch(error => {\r\n          console.error(\"Error while playing video:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n     <div>\r\n      {/* Video element with controls */}\r\n      <video ref={videoRef} controls muted />\r\n\r\n      {/* Play button */}\r\n      {/* <button onClick={handlePlayVideo}>Play Video</button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAACC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMO,YAAY,GAAGP,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC;EACA,MAAMW,aAAa,GAAG,+nmCAA+nmC;EACrpmCb,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACO,OAAO,IAAIC,UAAU,EAAE;MAClC,MAAMA,UAAU,GAAGC,IAAI,CAACH,aAAa,CAAC;MACtC;MACA;MACAI,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;MACvB,MAAMI,UAAU,GAAGC,IAAI,CAACL,UAAU,CAAC;MACnC;MACA,MAAMM,WAAW,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACI,MAAM,CAAC;MACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;QAC1CH,WAAW,CAACG,CAAC,CAAC,GAAGL,UAAU,CAACM,UAAU,CAACD,CAAC,CAAC;MAC3C;;MAEA;MACA,MAAME,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACN,WAAW,CAAC,EAAE;QAAEO,IAAI,EAAE;MAAY,CAAC,CAAC;;MAEhE;MACA,MAAMnB,QAAQ,GAAGoB,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC;;MAE/C;MACAnB,QAAQ,CAACO,OAAO,CAACiB,GAAG,GAAGtB,QAAQ;;MAE/B;MACAF,QAAQ,CAACO,OAAO,CAACkB,IAAI,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACjB,UAAU,CAAC,CAAC;EAChB;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACE,MAAMkB,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIxB,QAAQ,EAAE;MACZ;MACAF,QAAQ,CAACO,OAAO,CAACiB,GAAG,GAAGtB,QAAQ;MAC/BF,QAAQ,CAACO,OAAO,CAACkB,IAAI,CAAC,CAAC,CACpBE,KAAK,CAACC,KAAK,IAAI;QACdlB,OAAO,CAACkB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACG/B,OAAA;IAAAgC,QAAA,eAEChC,OAAA;MAAOiC,GAAG,EAAE9B,QAAS;MAAC+B,QAAQ;MAACC,KAAK;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIpC,CAAC;AAEV,CAAC;AAACrC,EAAA,CA1IID,WAAW;AAAAuC,EAAA,GAAXvC,WAAW;AA4IjB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}