{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msado\\\\OneDrive\\\\Pulpit\\\\video-stream\\\\video\\\\src\\\\components\\\\VideoPlayer.jsx\",\n  _s = $RefreshSig$();\n// Random ints working///////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n\n// const VideoBlob = () => {\n//   const [currentData, setCurrentData] = useState([]);\n\n//   useEffect(() => {\n//     const ws = new WebSocket(\"ws://localhost:8888/\");\n\n//     ws.onopen = () => {\n//       console.log('Opened Connection!');\n//     };\n\n//     ws.onmessage = (event) => {\n//       setCurrentData(JSON.parse(event.data));\n//     };\n\n//     ws.onclose = () => {\n//       console.log('Closed Connection!');\n//     };\n\n//     return () => {\n//       ws.close();\n//     };\n//   }, []);\n\n//   console.log(currentData);\n\n//   return (\n//     <div>\n//       {currentData.map((cd)=>(\n//         <div>\n//           <p>{cd.name}</p>\n//           <p>{cd.number}</p>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default VideoBlob;\n\n// PING_PONG////////////////////////////////////////////////\n// import React, { useEffect, useRef } from 'react';\n\n// function VideoBlob() {\n//   const socketRef = useRef(null);\n\n//   useEffect(() => {\n//     // Create a WebSocket connection\n//     socketRef.current = new WebSocket('ws://localhost:8000');\n\n//     // Listen for messages from the server\n//     socketRef.current.onmessage = function (event) {\n//       console.log('Received: ', event.data);\n//     };\n\n//     // Clean up the WebSocket connection when the component is unmounted\n//     return () => {\n//       socketRef.current.close();\n//     };\n//   }, []);\n\n//   const sendPing = () => {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       // Send a ping message to the server\n//       socketRef.current.send('ping');\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <button onClick={sendPing}>Send Ping</button>\n//     </div>\n//   );\n// }\n\n// export default VideoBlob;\n\n// App.js chunks are coming frm server but problem is here\n// import React, { useEffect, useRef } from \"react\";\n\n// function VideoBlob() {\n//   const videoRef = useRef(null);\n//   const wsRef = useRef(null);\n//   const receivedChunks = useRef([]);\n//   const totalBytesReceived = useRef(0);\n\n//   useEffect(() => {\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\n\n//     wsRef.current.onmessage = (event) => {\n//       const videoChunk = event.data;\n//       receivedChunks.current.push(videoChunk);\n//       totalBytesReceived.current += videoChunk.length;\n\n//       // Check if all chunks are received (e.g., by comparing total received bytes with expected size)\n//       // If all chunks are received, proceed to create and play the video\n\n//         const concatenatedChunks = new Uint8Array(totalBytesReceived.current);\n//         let offset = 0;\n//         for (const chunk of receivedChunks.current) {\n//           concatenatedChunks.set(chunk, offset);\n//           offset += chunk.length;\n//         }\n\n//         // Create a Blob from the concatenated chunks\n//         const videoBlob = new Blob([concatenatedChunks], { type: \"video/mp4\" });\n\n//         // Create a Blob URL\n//         const videoUrl = URL.createObjectURL(videoBlob);\n\n//         // Set the video element's src attribute to the Blob URL\n//         videoRef.current.src = videoUrl;\n\n//     };\n\n//     return () => {\n//       wsRef.current.close();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} controls />\n//     </div>\n//   );\n// }\n\n// export default VideoBlob;\n\n// //////////////////dane przychodza ale nie odtwarza video\n// import React, { useEffect, useRef } from \"react\";\n\n// function VideoPlayer() {\n//   const videoRef = useRef(null);\n//   const wsRef = useRef(null);\n//   const mediaSourceRef = useRef(null);\n//   const sourceBufferRef = useRef(null);\n//   const bufferQueueRef = useRef([]);\n//   const isAppendingRef = useRef(false);\n//   const isSourceOpenRef = useRef(false);\n\n//   useEffect(() => {\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\n\n//     wsRef.current.onmessage = (event) => {\n//       console.log(event)\n//       if (typeof event.data === \"string\") {\n//         console.log(\"string\")\n//         const message = JSON.parse(event.data);\n\n//         if (message.type === \"metadata\") {\n//           console.log(\"metadata\")\n//           const mediaSource = new MediaSource();\n//           videoRef.current.src = URL.createObjectURL(mediaSource);\n//           mediaSourceRef.current = mediaSource;\n\n//           mediaSource.addEventListener(\"sourceopen\", handleSourceOpen);\n//           mediaSource.addEventListener(\"sourceended\", handleSourceEnded);\n//           mediaSource.addEventListener(\"error\", handleSourceError);\n//         }\n//       } else if (event.data instanceof Blob && sourceBufferRef.current) {\n//         console.log(\"third\")\n//         const videoData = event.data;\n//         bufferQueueRef.current.push(videoData);\n\n//         processBufferQueue();\n//       }\n//     };\n\n//     return () => {\n//       wsRef.current.close();\n//     };\n//   }, []);\n\n//   const handleSourceOpen = () => {\n//     const mediaSource = mediaSourceRef.current;\n//     const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\n//     sourceBufferRef.current = sourceBuffer;\n//     isSourceOpenRef.current = true;\n\n//     sourceBuffer.addEventListener(\"updateend\", processBufferQueue);\n//   };\n\n//   const handleSourceEnded = () => {\n//     console.log(\"MediaSource ended\");\n//   };\n\n//   const handleSourceError = (error) => {\n//     console.error(\"MediaSource error:\", error);\n//   };\n//   const processBufferQueue = async () => {\n//     if (isSourceOpenRef.current && !isAppendingRef.current && bufferQueueRef.current.length > 0) {\n//       const videoData = bufferQueueRef.current.shift();\n//       isAppendingRef.current = true;\n\n//       try {\n//         const response = await fetch(URL.createObjectURL(videoData));\n//         const arrayBuffer = await response.arrayBuffer();\n//         sourceBufferRef.current.appendBuffer(arrayBuffer);\n//       } catch (error) {\n//         console.error(\"Error appending video data to SourceBuffer:\", error);\n//         isAppendingRef.current = false;\n//         processBufferQueue();\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} controls />\n//     </div>\n//   );\n// }\n// export default VideoPlayer;\n\n// /////////////17.07 decoding works fine\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const videoRef = useRef(null);\n  const websocketRef = useRef(null);\n  const base64Data = \"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\";\n  useEffect(() => {\n    if (videoRef.current && base64Data) {\n      // Decode the base64 data\n      const binaryData = atob(base64Data);\n\n      // Convert the binary data to a Uint8Array buffer\n      const arrayBuffer = new Uint8Array(binaryData.length);\n      for (let i = 0; i < binaryData.length; i++) {\n        arrayBuffer[i] = binaryData.charCodeAt(i);\n      }\n      const codecDetails = 'avc1.42E01E, mp4a.40.2';\n      // Create a Blob from the Uint8Array buffer\n      const videoBlob = new Blob([arrayBuffer], {\n        type: `video/mp4; codecs=\"${codecDetails}\"`\n      });\n      console.log(videoBlob);\n      // Create an object URL from the Blob\n      const videoURL = URL.createObjectURL(videoBlob);\n      // Set the video source to the object URL\n      videoRef.current.src = videoURL;\n\n      // Play the video\n      videoRef.current.play();\n    }\n  }, [base64Data]);\n\n  // useEffect(() => {\n  //   // Create a WebSocket connection\n  //   const socket = new WebSocket(\"ws://localhost:8080\");\n\n  //   socket.onopen = () => {\n  //     console.log(\"Connected to server\");\n  //   };\n\n  //   socket.onmessage = (event) => {\n  //     // Receive video data from the server\n  //     const data = event.data;\n  //     videoRef.current.src = URL.createObjectURL(data);\n  //   };\n\n  //   socket.onclose = () => {\n  //     console.log(\"Disconnected from server\");\n  //   };\n\n  //   websocketRef.current = socket;\n  //   console.log({ socket });\n\n  //   return () => {\n  //     // Clean up the WebSocket connection\n  //     websocketRef.current.close();\n  //   };\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"tqMgLWmKoVko53x0Xaoars4NEKk=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\n\n// REACTPLAYER for hls\n\n// import ReactPlayer from 'react-player';\n// import React, { useEffect, useRef } from \"react\";\n\n// const VideoPlayer = () => {\n//   //   const videoRef = useRef(null);\n//   // const websocketRef = useRef(null);\n\n//   //  useEffect(() => {\n//   //   // Create a WebSocket connection\n//   //   const socket = new WebSocket(\"ws://localhost:8000\");\n\n//   //   socket.onopen = () => {\n//   //     console.log(\"Connected to server\");\n//   //   };\n\n//   //   socket.onmessage = (event) => {\n//   //     // Receive video data from the server\n//   //     const data = event.data;\n//   //     videoRef.current.src = URL.createObjectURL(data);\n//   //   };\n\n//   //   socket.onclose = () => {\n//   //     console.log(\"Disconnected from server\");\n//   //   };\n\n//   //   websocketRef.current = socket;\n//   //   console.log({ socket });\n\n//   //   return () => {\n//   //     // Clean up the WebSocket connection\n//   //     websocketRef.current.close();\n//   //   };\n//   // }, []);\n//   return (\n//     <ReactPlayer\n//       // url='<https://www.youtube.com/watch?v=dQw4w9WgXcQ>'\n//       // url='https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'\n//       // url='http://192.168.128.149:8888/startvideo/?token=test&deviceid=2'\n//       url=\"http://localhost:8000\"\n//       controls\n//       playing\n//       width=\"100%\"\n//       height=\"auto\"\n//     />\n//   );\n// };\n\n// export default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","VideoPlayer","_s","videoRef","websocketRef","base64Data","current","binaryData","atob","arrayBuffer","Uint8Array","length","i","charCodeAt","codecDetails","videoBlob","Blob","type","console","log","videoURL","URL","createObjectURL","src","play","children","ref","controls","autoPlay","muted","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/msado/OneDrive/Pulpit/video-stream/video/src/components/VideoPlayer.jsx"],"sourcesContent":["// Random ints working///////////////////////////////////\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const VideoBlob = () => {\r\n//   const [currentData, setCurrentData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const ws = new WebSocket(\"ws://localhost:8888/\");\r\n\r\n//     ws.onopen = () => {\r\n//       console.log('Opened Connection!');\r\n//     };\r\n\r\n//     ws.onmessage = (event) => {\r\n//       setCurrentData(JSON.parse(event.data));\r\n//     };\r\n\r\n//     ws.onclose = () => {\r\n//       console.log('Closed Connection!');\r\n//     };\r\n\r\n//     return () => {\r\n//       ws.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   console.log(currentData);\r\n\r\n//   return (\r\n//     <div>\r\n//       {currentData.map((cd)=>(\r\n//         <div>\r\n//           <p>{cd.name}</p>\r\n//           <p>{cd.number}</p>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoBlob;\r\n\r\n// PING_PONG////////////////////////////////////////////////\r\n// import React, { useEffect, useRef } from 'react';\r\n\r\n// function VideoBlob() {\r\n//   const socketRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Create a WebSocket connection\r\n//     socketRef.current = new WebSocket('ws://localhost:8000');\r\n\r\n//     // Listen for messages from the server\r\n//     socketRef.current.onmessage = function (event) {\r\n//       console.log('Received: ', event.data);\r\n//     };\r\n\r\n//     // Clean up the WebSocket connection when the component is unmounted\r\n//     return () => {\r\n//       socketRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const sendPing = () => {\r\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\r\n//       // Send a ping message to the server\r\n//       socketRef.current.send('ping');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <button onClick={sendPing}>Send Ping</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoBlob;\r\n\r\n// App.js chunks are coming frm server but problem is here\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// function VideoBlob() {\r\n//   const videoRef = useRef(null);\r\n//   const wsRef = useRef(null);\r\n//   const receivedChunks = useRef([]);\r\n//   const totalBytesReceived = useRef(0);\r\n\r\n//   useEffect(() => {\r\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//     wsRef.current.onmessage = (event) => {\r\n//       const videoChunk = event.data;\r\n//       receivedChunks.current.push(videoChunk);\r\n//       totalBytesReceived.current += videoChunk.length;\r\n\r\n//       // Check if all chunks are received (e.g., by comparing total received bytes with expected size)\r\n//       // If all chunks are received, proceed to create and play the video\r\n\r\n//         const concatenatedChunks = new Uint8Array(totalBytesReceived.current);\r\n//         let offset = 0;\r\n//         for (const chunk of receivedChunks.current) {\r\n//           concatenatedChunks.set(chunk, offset);\r\n//           offset += chunk.length;\r\n//         }\r\n\r\n//         // Create a Blob from the concatenated chunks\r\n//         const videoBlob = new Blob([concatenatedChunks], { type: \"video/mp4\" });\r\n\r\n//         // Create a Blob URL\r\n//         const videoUrl = URL.createObjectURL(videoBlob);\r\n\r\n//         // Set the video element's src attribute to the Blob URL\r\n//         videoRef.current.src = videoUrl;\r\n\r\n//     };\r\n\r\n//     return () => {\r\n//       wsRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={videoRef} controls />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoBlob;\r\n\r\n// //////////////////dane przychodza ale nie odtwarza video\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// function VideoPlayer() {\r\n//   const videoRef = useRef(null);\r\n//   const wsRef = useRef(null);\r\n//   const mediaSourceRef = useRef(null);\r\n//   const sourceBufferRef = useRef(null);\r\n//   const bufferQueueRef = useRef([]);\r\n//   const isAppendingRef = useRef(false);\r\n//   const isSourceOpenRef = useRef(false);\r\n\r\n//   useEffect(() => {\r\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//     wsRef.current.onmessage = (event) => {\r\n//       console.log(event)\r\n//       if (typeof event.data === \"string\") {\r\n//         console.log(\"string\")\r\n//         const message = JSON.parse(event.data);\r\n\r\n//         if (message.type === \"metadata\") {\r\n//           console.log(\"metadata\")\r\n//           const mediaSource = new MediaSource();\r\n//           videoRef.current.src = URL.createObjectURL(mediaSource);\r\n//           mediaSourceRef.current = mediaSource;\r\n\r\n//           mediaSource.addEventListener(\"sourceopen\", handleSourceOpen);\r\n//           mediaSource.addEventListener(\"sourceended\", handleSourceEnded);\r\n//           mediaSource.addEventListener(\"error\", handleSourceError);\r\n//         }\r\n//       } else if (event.data instanceof Blob && sourceBufferRef.current) {\r\n//         console.log(\"third\")\r\n//         const videoData = event.data;\r\n//         bufferQueueRef.current.push(videoData);\r\n\r\n//         processBufferQueue();\r\n//       }\r\n//     };\r\n\r\n//     return () => {\r\n//       wsRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSourceOpen = () => {\r\n//     const mediaSource = mediaSourceRef.current;\r\n//     const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\r\n//     sourceBufferRef.current = sourceBuffer;\r\n//     isSourceOpenRef.current = true;\r\n\r\n//     sourceBuffer.addEventListener(\"updateend\", processBufferQueue);\r\n//   };\r\n\r\n//   const handleSourceEnded = () => {\r\n//     console.log(\"MediaSource ended\");\r\n//   };\r\n\r\n//   const handleSourceError = (error) => {\r\n//     console.error(\"MediaSource error:\", error);\r\n//   };\r\n//   const processBufferQueue = async () => {\r\n//     if (isSourceOpenRef.current && !isAppendingRef.current && bufferQueueRef.current.length > 0) {\r\n//       const videoData = bufferQueueRef.current.shift();\r\n//       isAppendingRef.current = true;\r\n\r\n//       try {\r\n//         const response = await fetch(URL.createObjectURL(videoData));\r\n//         const arrayBuffer = await response.arrayBuffer();\r\n//         sourceBufferRef.current.appendBuffer(arrayBuffer);\r\n//       } catch (error) {\r\n//         console.error(\"Error appending video data to SourceBuffer:\", error);\r\n//         isAppendingRef.current = false;\r\n//         processBufferQueue();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={videoRef} controls />\r\n//     </div>\r\n//   );\r\n// }\r\n// export default VideoPlayer;\r\n\r\n// /////////////17.07 decoding works fine\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nconst VideoPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  const websocketRef = useRef(null);\r\n\r\n  const base64Data = \"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\"\r\n  useEffect(() => {\r\n    if (videoRef.current && base64Data) {\r\n      // Decode the base64 data\r\n      const binaryData = atob(base64Data);\r\n\r\n      // Convert the binary data to a Uint8Array buffer\r\n      const arrayBuffer = new Uint8Array(binaryData.length);\r\n      for (let i = 0; i < binaryData.length; i++) {\r\n        arrayBuffer[i] = binaryData.charCodeAt(i);\r\n      }\r\n      const codecDetails = 'avc1.42E01E, mp4a.40.2';\r\n      // Create a Blob from the Uint8Array buffer\r\n      const videoBlob = new Blob([arrayBuffer], { type:  `video/mp4; codecs=\"${codecDetails}\"`  });\r\n\r\n      console.log(videoBlob)\r\n      // Create an object URL from the Blob\r\n      const videoURL = URL.createObjectURL(videoBlob);\r\n      // Set the video source to the object URL\r\n      videoRef.current.src = videoURL;\r\n\r\n      // Play the video\r\n      videoRef.current.play();\r\n    }\r\n  }, [base64Data]);\r\n\r\n  // useEffect(() => {\r\n  //   // Create a WebSocket connection\r\n  //   const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n  //   socket.onopen = () => {\r\n  //     console.log(\"Connected to server\");\r\n  //   };\r\n\r\n  //   socket.onmessage = (event) => {\r\n  //     // Receive video data from the server\r\n  //     const data = event.data;\r\n  //     videoRef.current.src = URL.createObjectURL(data);\r\n  //   };\r\n\r\n  //   socket.onclose = () => {\r\n  //     console.log(\"Disconnected from server\");\r\n  //   };\r\n\r\n  //   websocketRef.current = socket;\r\n  //   console.log({ socket });\r\n\r\n  //   return () => {\r\n  //     // Clean up the WebSocket connection\r\n  //     websocketRef.current.close();\r\n  //   };\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <video ref={videoRef} controls autoPlay muted/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n\r\n// REACTPLAYER for hls\r\n\r\n// import ReactPlayer from 'react-player';\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// const VideoPlayer = () => {\r\n//   //   const videoRef = useRef(null);\r\n//   // const websocketRef = useRef(null);\r\n\r\n//   //  useEffect(() => {\r\n//   //   // Create a WebSocket connection\r\n//   //   const socket = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//   //   socket.onopen = () => {\r\n//   //     console.log(\"Connected to server\");\r\n//   //   };\r\n\r\n//   //   socket.onmessage = (event) => {\r\n//   //     // Receive video data from the server\r\n//   //     const data = event.data;\r\n//   //     videoRef.current.src = URL.createObjectURL(data);\r\n//   //   };\r\n\r\n//   //   socket.onclose = () => {\r\n//   //     console.log(\"Disconnected from server\");\r\n//   //   };\r\n\r\n//   //   websocketRef.current = socket;\r\n//   //   console.log({ socket });\r\n\r\n//   //   return () => {\r\n//   //     // Clean up the WebSocket connection\r\n//   //     websocketRef.current.close();\r\n//   //   };\r\n//   // }, []);\r\n//   return (\r\n//     <ReactPlayer\r\n//       // url='<https://www.youtube.com/watch?v=dQw4w9WgXcQ>'\r\n//       // url='https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'\r\n//       // url='http://192.168.128.149:8888/startvideo/?token=test&deviceid=2'\r\n//       url=\"http://localhost:8000\"\r\n//       controls\r\n//       playing\r\n//       width=\"100%\"\r\n//       height=\"auto\"\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default VideoPlayer;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMM,YAAY,GAAGN,MAAM,CAAC,IAAI,CAAC;EAEjC,MAAMO,UAAU,GAAG,g9GAAg9G;EACn+GR,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,CAACG,OAAO,IAAID,UAAU,EAAE;MAClC;MACA,MAAME,UAAU,GAAGC,IAAI,CAACH,UAAU,CAAC;;MAEnC;MACA,MAAMI,WAAW,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACI,MAAM,CAAC;MACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;QAC1CH,WAAW,CAACG,CAAC,CAAC,GAAGL,UAAU,CAACM,UAAU,CAACD,CAAC,CAAC;MAC3C;MACA,MAAME,YAAY,GAAG,wBAAwB;MAC7C;MACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACP,WAAW,CAAC,EAAE;QAAEQ,IAAI,EAAI,sBAAqBH,YAAa;MAAI,CAAC,CAAC;MAE5FI,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;MACtB;MACA,MAAMK,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACP,SAAS,CAAC;MAC/C;MACAZ,QAAQ,CAACG,OAAO,CAACiB,GAAG,GAAGH,QAAQ;;MAE/B;MACAjB,QAAQ,CAACG,OAAO,CAACkB,IAAI,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACnB,UAAU,CAAC,CAAC;;EAEhB;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACEL,OAAA;IAAAyB,QAAA,eACEzB,OAAA;MAAO0B,GAAG,EAAEvB,QAAS;MAACwB,QAAQ;MAACC,QAAQ;MAACC,KAAK;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA9DID,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AAgEjB,eAAeA,WAAW;;AAE1B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}