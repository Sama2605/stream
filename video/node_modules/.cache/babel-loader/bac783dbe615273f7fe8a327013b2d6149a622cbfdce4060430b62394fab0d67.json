{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msado\\\\OneDrive\\\\Pulpit\\\\video-stream\\\\video\\\\src\\\\components\\\\VideoPlayer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const videoRef = useRef(null);\n  const websocketRef = useRef(null);\n  const videoChunksRef = useRef([]); // To store received video chunks\n  console.log(videoChunksRef);\n  const [videoURL, setVideoURL] = useState(null);\n  console.log(videoURL);\n  useEffect(() => {\n    // Create a WebSocket connection\n    // const socket = new WebSocket(\"ws://192.168.0.185:8080\");\n    const socket = new WebSocket('ws://192.168.0.186:33333');\n    socket.onopen = () => {\n      socket.send(\"Message to send\");\n      console.log(\"Connected to server\");\n    };\n    socket.onmessage = event => {\n      // Receive video data from the server\n      const data = event.data;\n      const fileReader = new FileReader();\n      // Set up the onload event to handle the result when it's ready\n      fileReader.onload = function (event) {\n        // The result contains the Base64 encoded data\n        const base64Data = event.target.result;\n        // console.log(base64Datas)\n        // const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\n        // const base64Data = \"R2tYZm82TkNob0VCUXZlQkFVTHlnUVJDODRFSVFvS0VkMlZpYmV5Q0FBQkNoNEVCUW9XQkFSaFRnR2NRSVFtSEVVMmJkTHROdTR0VHE0UVZTYWxtVTZ5QlFFMjdpMU9yaEJaVXJtdFRySUdzVGJ1TlU2dUVFVTJiZEZPc2d5RUpjMDI3akZPcmhCeFR1MnRUcklJTlFSVkpxV2JuYzZTUVJzYWRSYUdGcVNsTlBRb3ZkUUJXdlNyWHNZTVBRa0JFaVlSRy9jQUFSR0dJQkJ1N21sSWVzQUJOZ0tWb2RIUndPaTh2YzI5MWNtTmxabTl5WjJVdWJtVjBMM0J5YjJwbFkzUnpMM2xoYld0aFYwR1FVMjl5Wlc1emIyNGdVM0YxWldWNlpSWlVybXRNajY2NDE0RUJjOFdIaUJtZ3lhWXh3b09CQVNQamc0UUNZbG9BSXpGUGhEK0FBQUNHaFZaZlZsQTRKWWFJZzFaUU9PQ0lzSUlDZ0xxQ0FXaXVURkxYZ1FKenhZZ0JpUDY1WEk3NnVvT0JBaU14VDRRL2dBQUFob2hCWDFaUFVrSkpVMk9pVEJrQ0hqb0JkbTl5WW1sekFBQUFBQUZFckFBQS8vLy8vd0Q2QUFELy8vLy91QUVEZG05eVltbHpLZ0FBQUZocGNHZ3VUM0puSUd4cFlsWnZjbUpwY3lCSklESXdNVEF3TXpJMUlDaEZkbVZ5ZVhkb1pYSmxLUUFBQUFBQkJYWnZjbUpwY3g5Q1ExWUJBQUFCQUJoalZDbEdtVkxTU29rWmM1UXhScGxpa2txSnBZUVdRa2lkY3hSVHFUblhuR3VzdWJVZ2hCQWFVMUFwQlpsU2psSnBHV09RS1FXWlVoQkxTU1YwRWpvbm5XTVFXMG5CMXBocmkwRzJISVFObWxKTUtjU1VVb3BDQ0JsVGpDbkZsRkpLUWdjbGRBNDY1aHhUamtvb1FiaWNjNnUxbHBaamk2bDBra3JuSkdSTVFrZ3BoWkpLQjZWVFRrSklOWmJXVWlrZGMxSlNha0hvSUlRUVFyWWdoQTJDMEpCVkFBQUJBTUJBRUJxeUNnQlFBQUFRaXFFWWlnS0VocXdDQURJQUFBU2dLSTdpS0k0ak9aSmpTUllRR3JJS0FBQUNBQkFBQU1Cd0ZFbVJGTW14SkV2U0xFdlRSRkZWZmRVMlZWWDJkVjNYZFYzWGRTQTBaQlVBQUFFQVFFaW5tYVVhSU1JTVpCZ0lEVmtGQUNBQUFBQkdLTUlRQTBKRFZnRUFBQUVBQUdJb09ZZ210T1o4YzQ2RFpqbG9Lc1htZEhBaTFlWkpiaXJtNXB4enpqa25tM1BHT09lY2M0cHlaakZvSnJUbW5ITVNnMllwYUNhMDVweHpuc1RtUVd1cXRPYWNjOFk1cDROeFJoam5uSE9hdE9aQmFqYlc1cHh6RnJTbU9Xb3V4ZWFjY3lMbDVrbHRMdFhtbkhQT09lZWNjODQ1NTV4enFoZW5jM0JPT09lY2M2TDI1bHB1UWhmbm5ITStHYWQ3YzBJNDU1eHp6am5ubkhQT09lZWNjNExRa0ZVQUFCQUFBRUVZTm9aeHB5QkluNk9CR0VXSWFjaWtCOTJqd3lSb0RISUtxVWVqbzVGUzZpQ1VWTVpKS1owZ05HUVZBQUFJQUFBaGhCUlNTQ0dGRkZKSUlZVVVVb2doaGhoaXlDbW5uSUlLS3Fta29vb3l5aXl6ekRMTExMUE1NdXV3czg0NjdEREVFRU1NcmJRU1MwMjExVmhqcmJubm5Hc08wbHBwcmJYV1NpbWxsRkpLS1FnTldRVUFnQUFBRUFnWlpKQkJSaUdGRkZLSUlhYWNjc29wcUtBQ1FrTldBUUNBQUFBQ0FBQUFQTWx6UkVkMFJFZDBSRWQwUkVkMFJNZHpQRWVVUkVtVVJFbTBUTXZVVEU4VlZkV1ZYVnZXWmQzMmJXRVhkdDMzZGQvM2RlUFhoV0ZabG1WWmxtVlpsbVZabG1WWmxtVlpndENRVlFBQUNBQUFnQkJDQ0NHRkZGSklJYVVZWTh3eDU2Q1RVRUlnTkdRVkFBQUlBQ0FBQUFEQVVSekZjU1JIY2lUSmtpeEprelJMc3p6TjB6eE45RVJSRkUzVFZFVlhkRVhkdEVYWmxFM1hkRTNaZEZWWnRWMVp0bTNaMW0xZmxtM2Y5MzNmOTMzZjkzM2Y5MzNmOTNVZENBMVpCUUJJQUFEb1NJNmtTSXFrU0k3ak9KSWtBYUVocXdBQUdRQUFBUUFvaXFNNGp1TklraVJKbHFSSm51VlpvbVpxcG1kNnFxZ0NvU0dyQUFCQUFBQUJBQUFBQUFBb211SXBwdUlwb3VJNW9pTktvbVZhb3FacXJpaWJzdXU2cnV1NnJ1dTZydXU2cnV1NnJ1dTZydXU2cnV1NnJ1dTZydXU2cnV1NnJ1dTZMaEFhc2dvQWtBQUEwSkVjeVpFY1NaRVVTWkVjeVFGQ1ExWUJBRElBQUFJQWNBekhrQlRKc1N4TDB6ek4wenhOOUVSUDlFeFBGVjNSQlVKRFZnRUFnQUFBQWdBQUFBQUFNQ1REVWl4SGN6UkpsRlJMdFZSTnRWUkxGVlZQVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZOVTNUTkUwZ05HUWxBQUFFQU1CaWpjSGxJQ0VsSmVYZUVNSVFrNTR4SmlHMVhpRUVrWkxlTVFZVmc1NHlvZ3h5M2tMakVJTWVDQTFaRVFCRUFRQUF4aURIRUhQSU9VZXBreEk1NTZoMGxCcm5IS1dPVW1jcHhaaGl6U2lWMkZLc2pYT09Va2V0bzVSaUxDMTJsRktOcWNZQ0FBQUNIQUFBQWl5RVFrTldCQUJSQUFDRU1VZ3BwQlJpakRtbm5FT01LZWVZYzRZeDVoeHpqam5ub0hSU0t1ZWNkRTVLeEJoempqbW5uSE5TT2llVmMwNUtKNkVBQUlBQUJ3Q0FBQXVoMEpBVkFVQ2NBSUJCa2p4UDhqUlJsRFJQRkVWVGRGMVJORjNYOGp6VjlFeFRWVDNSVkZWVFZXM1pWRlZabGp6UE5EM1RWRlhQTkZYVlZGVlpObFZWbGtWVjFXM1RkWFhiZEZYZGxtM2I5MTFiRm5aUlZXM2RWRjNiTjFYWDlsM1o5bjFaMW5WajhqeFY5VXpUZFQzVGRHWFZkVzFiZFYxZDkweFRsazNYbFdYVGRXM2JsV1ZkZDJYWjl6WFRkRjNUVldYWmRGM1pkbVZYdDExWjluM1RkWVhmbFdWZlYyVlpHSFpkOTRWYjE1WGxkRjNkVjJWWE4xWlo5bjFiMTRYaDFuVmhtVHhQVlQzVGRGM1BORjFYZFYxZlYxM1gxalhUbEdYVGRXM1pWRjFaZG1YWjkxMVgxblhQTkdYWmRGM2JObDFYbGwxWjluMVhsblhkZEYxZlYyVlorRlZYOW5WWjE1WGgxbTNoTjEzWDkxVlo5b1ZYbG5YaDFuVmh1WFZkR0Q1VjlYMVRkb1hoZEdYZjE0WGZXVzVkT0piUmRYMWhsVzNoV0dWWk9YN2hXSmJkOTVWbGRGMWZXRzNaR0ZaWkZvWmYrSjNsOW4zamVIVmRHVzdkNTh5Njd3ekg3NlQ3eXRQVmJXT1pmZDFaWmw5M2p1RVlPci93NDZtcXI1dXVLd3luTEF1LzdldkdzL3Urc295dTYvdXFMls66QXUvS3R2Q3NldSs4L3krc0N5ajdQckNhc3ZDc05xMk1keStiaXkvY0J6TGErdktNZXUrVWJaMWZGOTRDc1B6ZEhWZGVXWmR4L1oxZE9OSE9IN0tBQUNBQVFjQWdBQVR5a0NoSVNzQ2dEZ0JBSThraWFKa1dhSW9XWllvaXFib3VxSm91cTZrYWFhcGFaNXBXcHBubXFacHFySXBtcTRzYVpwcFdwNW1tcHFubWFab21xNXJtcWFzaXFZcHk2WnF5ckpwbXJMc3VySnR1NjVzMjZKcHlySnBtckpzbXFZc3U3S3IyNjdzNnJxa1dhYXBlWjVwYXA1bm1xWnF5ckpwbXE2cmVaNXFlcDVvcXA0b3FxcHFxcXF0cXFvc1c1NW5tcHJvcWFZbmlxcHFxcWF0bXFvcXk2YXEyckpwcXJac3FxcHR1NnJzK3JKdDY3cHBxckp0cXFZdG02cHEyNjdzNnJJczI3b3ZhWnBwYXA1bm1wcm5tYVpwbXJKc21xb3JXNTZubXA0b3Fxcm1pYVpxcXFvc202YXF5cGJubWFvbmlxcnFpWjVybXFvcXk2WnEycXBwbXJac3Fxb3RtNllxeTY1dCs3N3J5ckp1cXFwc202cHE2NlpxeXJKc3k3N3Z5cXJ1aXFZcHk2YXEyckpwcXJJdDI3THZ5N0tzKzZKcHlySnBxckp0cXFvdXk3SnRHN05zKzdwb21ySnRxcVl0bTZvcTI3SXQrN29zMjdydnlxNXZxNnFzNjdJdCs3cnUrcTV3Njdvd3ZMSnMrNnFzK3JvcjI3cHY2ekxiOW4xRTA1UmxVelZ0MjFSVldYWmwyZlpsMi9aOTBUUnRXMVZWV3paTjFiWmxXZlo5V2JadFlUUk4yVFpWVmRaTjFiUnRXWlp0WWJabDRYWmwyYmRsVy9aMTE1VjFYOWQ5NDlkbDNlYTZzdTNMc3EzN3FxdjZ0dTc3d25EcnJ2QUtBQUFZY0FBQUNEQ2hEQlFhc2hJQWlBSUFBSXhoakRFSWpWTE9PUWVoVWNvNTV5Qmt6a0VJSVpYTU9RZ2hsSkk1QjZHVWxETG5JSlNTVWdpaGxKUmFDeUdVbEZKckJRQUFGRGdBQUFUWW9DbXhPRUNoSVNzQmdGUUFBSVBqV0pibm1hSnEyckpqU1o0bmlxcXBxcmJ0U0pibmlhSnBxcXB0VzU0bmlxYXBxcTdyNjVybmlhSnBxcXJyNnJwb21xYXBxcTdydXJvdW1xS3BxcXJydXJLdW02YXFxcTRydTdMczY2\";\n\n        console.log(base64Data);\n        const binaryDatas = atob(base64Data);\n        console.log(binaryDatas);\n        const binaryData = atob(binaryDatas);\n        console.log(binaryData);\n        // Convert the binary data to a Uint8Array buffer\n        const arrayBuffer = new Uint8Array(binaryData.length);\n        for (let i = 0; i < binaryData.length; i++) {\n          arrayBuffer[i] = binaryData.charCodeAt(i);\n        }\n\n        // Store the received chunk in the videoChunksRef\n        videoChunksRef.current.push(arrayBuffer);\n\n        // Combine all the chunks into a single Uint8Array buffer\n        const combinedBuffer = new Uint8Array(videoChunksRef.current.reduce((totalLength, chunk) => totalLength + chunk.length, 0));\n        let offset = 0;\n        videoChunksRef.current.forEach(chunk => {\n          combinedBuffer.set(chunk, offset);\n          offset += chunk.length;\n        });\n\n        // Create a Blob from the combined Uint8Array buffer\n        const videoBlob = new Blob([combinedBuffer], {\n          type: 'video/mp4'\n        });\n        console.log(videoBlob.type);\n\n        // Create an object URL from the Blob\n        const videoURL = URL.createObjectURL(videoBlob);\n\n        // Set the video URL state\n        setVideoURL(videoURL);\n      };\n\n      // Read the Blob data as Base64\n      fileReader.readAsDataURL(data);\n    };\n    socket.onclose = () => {\n      console.log(\"Disconnected from server\");\n    };\n    websocketRef.current = socket;\n    return () => {\n      // Clean up the WebSocket connection\n      websocketRef.current.close();\n    };\n  }, []);\n  const handlePlayVideo = () => {\n    if (videoURL) {\n      // Play the video if the URL is available\n      videoRef.current.src = videoURL;\n      videoRef.current.play().catch(error => {\n        console.error(\"Error while playing video:\", error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlayVideo,\n      children: \"Play Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"g7ga99xkv2z87iIo1AgWkIzGwbU=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\n// //////////////////////////////////\n// import React, { useEffect, useRef,useState } from \"react\";\n\n// const VideoPlayer = () => {\n//   const videoRef = useRef(null);\n//   const websocketRef = useRef(null);\n//   const [videoURL, setVideoURL] = useState(null);\n//   const [arr, setArr] = useState(null);\n// /////////////////// decoding base-64\n// const binaryMessage = \"\"\n// useEffect(() => {\n//   if (videoRef.current && binaryMessage) {\n//     // const base64Data = btoa(binaryMessage);\n//     // setBase64Data(base64Data);\n//     // Decode the base64 data\n//     const binaryDatas = atob(binaryMessage);\n//     console.log(binaryDatas)\n//     const binaryData = atob(binaryDatas)\n//     console.log(binaryData)\n//     // Convert the binary data to a Uint8Array buffer\n//     const arrayBuffer = new Uint8Array(binaryData.length);\n//     for (let i = 0; i < binaryData.length; i++) {\n//       arrayBuffer[i] = binaryData.charCodeAt(i);\n//     }\n\n//     // Create a Blob from the Uint8Array buffer\n//     const videoBlob = new Blob([arrayBuffer], { type: 'video/mp4' });\n\n//     // Create an object URL from the Blob\n//     const videoURL = URL.createObjectURL(videoBlob);\n\n//     // Set the video source to the object URL\n//     videoRef.current.src = videoURL;\n\n//     // Play the video\n//     videoRef.current.play();\n//   }\n// }, [binaryMessage]);\n// ///////////////////////////////only websocket\n// // useEffect(() => {\n// //   // Create a WebSocket connection\n// //   const socket = new WebSocket(\"ws://localhost:8080\");\n\n// //   socket.onopen = () => {\n// //     console.log(\"Connected to server\");\n// //   };\n\n// //   socket.onmessage = (event) => {\n// //     // Receive video data from the server\n// //     const data = event.data;\n// //     videoRef.current.src = URL.createObjectURL(data);\n// //   };\n\n// //   socket.onclose = () => {\n// //     console.log(\"Disconnected from server\");\n// //   };\n\n// //   websocketRef.current = socket;\n// //   console.log({ socket });\n\n// //   return () => {\n// //     // Clean up the WebSocket connection\n// //     websocketRef.current.close();\n// //   };\n// // }, []);\n// //////////////////////with [arr] it plays first part video\n// //   useEffect(() => {\n// //     // Create a WebSocket connection\n// //     const socket = new WebSocket(\"ws://localhost:8080\");\n\n// //     socket.onopen = () => {\n// //       console.log(\"Connected to server\");\n// //     };\n\n// //     socket.onmessage = (event) => {\n// //       // Receive video data from the server\n// //       const data = event.data;\n// //       const fileReader = new FileReader();\n\n// //       // Set up the onload event to handle the result when it's ready\n// //       fileReader.onload = function(event) {\n// //         // The result contains the Base64 encoded data\n// //         const base64Datas = event.target.result;\n\n// //         const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\n// //         //  const base64Data = \"GkXfo6NChoEBQveBAULygQRC84EIQoKEd2VJKQg\"\n// //         console.log(base64Data);\n// //         const binaryData = atob(base64Data);\n// // console.log(binaryData)\n// //       // Convert the binary data to a Uint8Array buffer\n// //       const arrayBuffer = new Uint8Array(binaryData.length);\n// //       for (let i = 0; i < binaryData.length; i++) {\n// //         arrayBuffer[i] = binaryData.charCodeAt(i);\n// //       }\n// //       setArr(arrayBuffer)\n// //       // Create a Blob from the Uint8Array buffer\n// //       const videoBlob = new Blob([arrayBuffer],  {type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'});\n\n// //       // Create an object URL from the Blob\n// //       const videoURL = URL.createObjectURL(videoBlob);\n\n// //       setVideoURL(videoURL);\n// //       // Set the video source to the object URL\n// //       // videoRef.current.src = videoURL;\n\n// //       // videoRef.current.play();\n\n// //       };\n// //       // Read the Blob data as Base64\n// //       fileReader.readAsDataURL(data);\n// //     };\n\n// //     socket.onclose = () => {\n// //       console.log(\"Disconnected from server\");\n// //     };\n\n// //     websocketRef.current = socket;\n\n// //     return () => {\n// //       // Clean up the WebSocket connection\n// //       websocketRef.current.close();\n// //     };\n// //   }, [arr]);\n//   const handlePlayVideo = () => {\n//     if (videoURL) {\n//       // Play the video if the URL is available\n//       videoRef.current.src = videoURL;\n//       videoRef.current.play()\n//         .catch(error => {\n//           console.error(\"Error while playing video:\", error);\n//         });\n//     }\n//   };\n\n//   return (\n//      <div>\n//       {/* Video element with controls */}\n//       <video ref={videoRef} controls muted />\n\n//       {/* Play button */}\n//       {/* <button onClick={handlePlayVideo}>Play Video</button> */}\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","VideoPlayer","_s","videoRef","websocketRef","videoChunksRef","console","log","videoURL","setVideoURL","socket","WebSocket","onopen","send","onmessage","event","data","fileReader","FileReader","onload","base64Data","target","result","binaryDatas","atob","binaryData","arrayBuffer","Uint8Array","length","i","charCodeAt","current","push","combinedBuffer","reduce","totalLength","chunk","offset","forEach","set","videoBlob","Blob","type","URL","createObjectURL","readAsDataURL","onclose","close","handlePlayVideo","src","play","catch","error","children","ref","controls","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/msado/OneDrive/Pulpit/video-stream/video/src/components/VideoPlayer.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst VideoPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  const websocketRef = useRef(null);\r\n  const videoChunksRef = useRef([]); // To store received video chunks\r\n  console.log(videoChunksRef)\r\n  const [videoURL, setVideoURL] = useState(null);\r\nconsole.log(videoURL)\r\n  useEffect(() => {\r\n    // Create a WebSocket connection\r\n    // const socket = new WebSocket(\"ws://192.168.0.185:8080\");\r\n    const socket =new WebSocket('ws://192.168.0.186:33333')\r\n\r\n\r\n    socket.onopen = () => {\r\n      socket.send(\"Message to send\");\r\n      console.log(\"Connected to server\");\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      // Receive video data from the server\r\n      const data = event.data;\r\n      \r\n      const fileReader = new FileReader();\r\n      // Set up the onload event to handle the result when it's ready\r\n      fileReader.onload = function(event) {\r\n        // The result contains the Base64 encoded data\r\n        const base64Data = event.target.result;\r\n        // console.log(base64Datas)\r\n        // const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\r\n        // const base64Data = \"R2tYZm82TkNob0VCUXZlQkFVTHlnUVJDODRFSVFvS0VkMlZpYmV5Q0FBQkNoNEVCUW9XQkFSaFRnR2NRSVFtSEVVMmJkTHROdTR0VHE0UVZTYWxtVTZ5QlFFMjdpMU9yaEJaVXJtdFRySUdzVGJ1TlU2dUVFVTJiZEZPc2d5RUpjMDI3akZPcmhCeFR1MnRUcklJTlFSVkpxV2JuYzZTUVJzYWRSYUdGcVNsTlBRb3ZkUUJXdlNyWHNZTVBRa0JFaVlSRy9jQUFSR0dJQkJ1N21sSWVzQUJOZ0tWb2RIUndPaTh2YzI5MWNtTmxabTl5WjJVdWJtVjBMM0J5YjJwbFkzUnpMM2xoYld0aFYwR1FVMjl5Wlc1emIyNGdVM0YxWldWNlpSWlVybXRNajY2NDE0RUJjOFdIaUJtZ3lhWXh3b09CQVNQamc0UUNZbG9BSXpGUGhEK0FBQUNHaFZaZlZsQTRKWWFJZzFaUU9PQ0lzSUlDZ0xxQ0FXaXVURkxYZ1FKenhZZ0JpUDY1WEk3NnVvT0JBaU14VDRRL2dBQUFob2hCWDFaUFVrSkpVMk9pVEJrQ0hqb0JkbTl5WW1sekFBQUFBQUZFckFBQS8vLy8vd0Q2QUFELy8vLy91QUVEZG05eVltbHpLZ0FBQUZocGNHZ3VUM0puSUd4cFlsWnZjbUpwY3lCSklESXdNVEF3TXpJMUlDaEZkbVZ5ZVhkb1pYSmxLUUFBQUFBQkJYWnZjbUpwY3g5Q1ExWUJBQUFCQUJoalZDbEdtVkxTU29rWmM1UXhScGxpa2txSnBZUVdRa2lkY3hSVHFUblhuR3VzdWJVZ2hCQWFVMUFwQlpsU2psSnBHV09RS1FXWlVoQkxTU1YwRWpvbm5XTVFXMG5CMXBocmkwRzJISVFObWxKTUtjU1VVb3BDQ0JsVGpDbkZsRkpLUWdjbGRBNDY1aHhUamtvb1FiaWNjNnUxbHBaamk2bDBra3JuSkdSTVFrZ3BoWkpLQjZWVFRrSklOWmJXVWlrZGMxSlNha0hvSUlRUVFyWWdoQTJDMEpCVkFBQUJBTUJBRUJxeUNnQlFBQUFRaXFFWWlnS0VocXdDQURJQUFBU2dLSTdpS0k0ak9aSmpTUllRR3JJS0FBQUNBQkFBQU1Cd0ZFbVJGTW14SkV2U0xFdlRSRkZWZmRVMlZWWDJkVjNYZFYzWGRTQTBaQlVBQUFFQVFFaW5tYVVhSU1JTVpCZ0lEVmtGQUNBQUFBQkdLTUlRQTBKRFZnRUFBQUVBQUdJb09ZZ210T1o4YzQ2RFpqbG9Lc1htZEhBaTFlWkpiaXJtNXB4enpqa25tM1BHT09lY2M0cHlaakZvSnJUbW5ITVNnMllwYUNhMDVweHpuc1RtUVd1cXRPYWNjOFk1cDROeFJoam5uSE9hdE9aQmFqYlc1cHh6RnJTbU9Xb3V4ZWFjY3lMbDVrbHRMdFhtbkhQT09lZWNjODQ1NTV4enFoZW5jM0JPT09lY2M2TDI1bHB1UWhmbm5ITStHYWQ3YzBJNDU1eHp6am5ubkhQT09lZWNjNExRa0ZVQUFCQUFBRUVZTm9aeHB5QkluNk9CR0VXSWFjaWtCOTJqd3lSb0RISUtxVWVqbzVGUzZpQ1VWTVpKS1owZ05HUVZBQUFJQUFBaGhCUlNTQ0dGRkZKSUlZVVVVb2doaGhoaXlDbW5uSUlLS3Fta29vb3l5aXl6ekRMTExMUE1NdXV3czg0NjdEREVFRU1NcmJRU1MwMjExVmhqcmJubm5Hc08wbHBwcmJYV1NpbWxsRkpLS1FnTldRVUFnQUFBRUFnWlpKQkJSaUdGRkZLSUlhYWNjc29wcUtBQ1FrTldBUUNBQUFBQ0FBQUFQTWx6UkVkMFJFZDBSRWQwUkVkMFJNZHpQRWVVUkVtVVJFbTBUTXZVVEU4VlZkV1ZYVnZXWmQzMmJXRVhkdDMzZGQvM2RlUFhoV0ZabG1WWmxtVlpsbVZabG1WWmxtVlpndENRVlFBQUNBQUFnQkJDQ0NHRkZGSklJYVVZWTh3eDU2Q1RVRUlnTkdRVkFBQUlBQ0FBQUFEQVVSekZjU1JIY2lUSmtpeEprelJMc3p6TjB6eE45RVJSRkUzVFZFVlhkRVhkdEVYWmxFM1hkRTNaZEZWWnRWMVp0bTNaMW0xZmxtM2Y5MzNmOTMzZjkzM2Y5MzNmOTNVZENBMVpCUUJJQUFEb1NJNmtTSXFrU0k3ak9KSWtBYUVocXdBQUdRQUFBUUFvaXFNNGp1TklraVJKbHFSSm51VlpvbVpxcG1kNnFxZ0NvU0dyQUFCQUFBQUJBQUFBQUFBb211SXBwdUlwb3VJNW9pTktvbVZhb3FacXJpaWJzdXU2cnV1NnJ1dTZydXU2cnV1NnJ1dTZydXU2cnV1NnJ1dTZydXU2cnV1NnJ1dTZMaEFhc2dvQWtBQUEwSkVjeVpFY1NaRVVTWkVjeVFGQ1ExWUJBRElBQUFJQWNBekhrQlRKc1N4TDB6ek4wenhOOUVSUDlFeFBGVjNSQlVKRFZnRUFnQUFBQWdBQUFBQUFNQ1REVWl4SGN6UkpsRlJMdFZSTnRWUkxGVlZQVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZOVTNUTkUwZ05HUWxBQUFFQU1CaWpjSGxJQ0VsSmVYZUVNSVFrNTR4SmlHMVhpRUVrWkxlTVFZVmc1NHlvZ3h5M2tMakVJTWVDQTFaRVFCRUFRQUF4aURIRUhQSU9VZXBreEk1NTZoMGxCcm5IS1dPVW1jcHhaaGl6U2lWMkZLc2pYT09Va2V0bzVSaUxDMTJsRktOcWNZQ0FBQUNIQUFBQWl5RVFrTldCQUJSQUFDRU1VZ3BwQlJpakRtbm5FT01LZWVZYzRZeDVoeHpqam5ub0hSU0t1ZWNkRTVLeEJoempqbW5uSE5TT2llVmMwNUtKNkVBQUlBQUJ3Q0FBQXVoMEpBVkFVQ2NBSUJCa2p4UDhqUlJsRFJQRkVWVGRGMVJORjNYOGp6VjlFeFRWVDNSVkZWVFZXM1pWRlZabGp6UE5EM1RWRlhQTkZYVlZGVlpObFZWbGtWVjFXM1RkWFhiZEZYZGxtM2I5MTFiRm5aUlZXM2RWRjNiTjFYWDlsM1o5bjFaMW5WajhqeFY5VXpUZFQzVGRHWFZkVzFiZFYxZDkweFRsazNYbFdYVGRXM2JsV1ZkZDJYWjl6WFRkRjNUVldYWmRGM1pkbVZYdDExWjluM1RkWVhmbFdWZlYyVlpHSFpkOTRWYjE1WGxkRjNkVjJWWE4xWlo5bjFiMTRYaDFuVmhtVHhQVlQzVGRGM1BORjFYZFYxZlYxM1gxalhUbEdYVGRXM1pWRjFaZG1YWjkxMVgxblhQTkdYWmRGM2JObDFYbGwxWjluMVhsblhkZEYxZlYyVlorRlZYOW5WWjE1WGgxbTNoTjEzWDkxVlo5b1ZYbG5YaDFuVmh1WFZkR0Q1VjlYMVRkb1hoZEdYZjE0WGZXVzVkT0piUmRYMWhsVzNoV0dWWk9YN2hXSmJkOTVWbGRGMWZXRzNaR0ZaWkZvWmYrSjNsOW4zamVIVmRHVzdkNTh5Njd3ekg3NlQ3eXRQVmJXT1pmZDFaWmw5M2p1RVlPci93NDZtcXI1dXVLd3luTEF1LzdldkdzL3Urc295dTYvdXFMls66QXUvS3R2Q3NldSs4L3krc0N5ajdQckNhc3ZDc05xMk1keStiaXkvY0J6TGErdktNZXUrVWJaMWZGOTRDc1B6ZEhWZGVXWmR4L1oxZE9OSE9IN0tBQUNBQVFjQWdBQVR5a0NoSVNzQ2dEZ0JBSThraWFKa1dhSW9XWllvaXFib3VxSm91cTZrYWFhcGFaNXBXcHBubXFacHFySXBtcTRzYVpwcFdwNW1tcHFubWFab21xNXJtcWFzaXFZcHk2WnF5ckpwbXJMc3VySnR1NjVzMjZKcHlySnBtckpzbXFZc3U3S3IyNjdzNnJxa1dhYXBlWjVwYXA1bm1xWnF5ckpwbXE2cmVaNXFlcDVvcXA0b3FxcHFxcXF0cXFvc1c1NW5tcHJvcWFZbmlxcHFxcWF0bXFvcXk2YXEyckpwcXJac3FxcHR1NnJzK3JKdDY3cHBxckp0cXFZdG02cHEyNjdzNnJJczI3b3ZhWnBwYXA1bm1wcm5tYVpwbXJKc21xb3JXNTZubXA0b3Fxcm1pYVpxcXFvc202YXF5cGJubWFvbmlxcnFpWjVybXFvcXk2WnEycXBwbXJac3Fxb3RtNllxeTY1dCs3N3J5ckp1cXFwc202cHE2NlpxeXJKc3k3N3Z5cXJ1aXFZcHk2YXEyckpwcXJJdDI3THZ5N0tzKzZKcHlySnBxckp0cXFvdXk3SnRHN05zKzdwb21ySnRxcVl0bTZvcTI3SXQrN29zMjdydnlxNXZxNnFzNjdJdCs3cnUrcTV3Njdvd3ZMSnMrNnFzK3JvcjI3cHY2ekxiOW4xRTA1UmxVelZ0MjFSVldYWmwyZlpsMi9aOTBUUnRXMVZWV3paTjFiWmxXZlo5V2JadFlUUk4yVFpWVmRaTjFiUnRXWlp0WWJabDRYWmwyYmRsVy9aMTE1VjFYOWQ5NDlkbDNlYTZzdTNMc3EzN3FxdjZ0dTc3d25EcnJ2QUtBQUFZY0FBQUNEQ2hEQlFhc2hJQWlBSUFBSXhoakRFSWpWTE9PUWVoVWNvNTV5Qmt6a0VJSVpYTU9RZ2hsSkk1QjZHVWxETG5JSlNTVWdpaGxKUmFDeUdVbEZKckJRQUFGRGdBQUFUWW9DbXhPRUNoSVNzQmdGUUFBSVBqV0pibm1hSnEyckpqU1o0bmlxcXBxcmJ0U0pibmlhSnBxcXB0VzU0bmlxYXBxcTdyNjVybmlhSnBxcXJyNnJwb21xYXBxcTdydXJvdW1xS3BxcXJydXJLdW02YXFxcTRydTdMczY2\";\r\n        \r\n        console.log(base64Data)\r\n        const binaryDatas = atob(base64Data);\r\n        console.log(binaryDatas)\r\n        const binaryData = atob(binaryDatas);\r\n        console.log(binaryData)\r\n        // Convert the binary data to a Uint8Array buffer\r\n        const arrayBuffer = new Uint8Array(binaryData.length);\r\n        for (let i = 0; i < binaryData.length; i++) {\r\n          arrayBuffer[i] = binaryData.charCodeAt(i);\r\n        }\r\n\r\n        // Store the received chunk in the videoChunksRef\r\n        videoChunksRef.current.push(arrayBuffer);\r\n\r\n        // Combine all the chunks into a single Uint8Array buffer\r\n        const combinedBuffer = new Uint8Array(videoChunksRef.current.reduce((totalLength, chunk) => totalLength + chunk.length, 0));\r\n        let offset = 0;\r\n        videoChunksRef.current.forEach(chunk => {\r\n          combinedBuffer.set(chunk, offset);\r\n          offset += chunk.length;\r\n        });\r\n\r\n        // Create a Blob from the combined Uint8Array buffer\r\n        const videoBlob = new Blob([combinedBuffer], { type: 'video/mp4' });\r\n        console.log(videoBlob.type)\r\n\r\n        // Create an object URL from the Blob\r\n        const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n        // Set the video URL state\r\n        setVideoURL(videoURL);\r\n      };\r\n\r\n      // Read the Blob data as Base64\r\n      fileReader.readAsDataURL(data);\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log(\"Disconnected from server\");\r\n    };\r\n\r\n    websocketRef.current = socket;\r\n\r\n    return () => {\r\n      // Clean up the WebSocket connection\r\n      websocketRef.current.close();\r\n    };\r\n  }, []);\r\n\r\n  const handlePlayVideo = () => {\r\n    if (videoURL) {\r\n      // Play the video if the URL is available\r\n      videoRef.current.src = videoURL;\r\n      videoRef.current.play()\r\n        .catch(error => {\r\n          console.error(\"Error while playing video:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Video element with controls */}\r\n      <video ref={videoRef} controls />\r\n\r\n      {/* Play button */}\r\n      <button onClick={handlePlayVideo}>Play Video</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n// //////////////////////////////////\r\n// import React, { useEffect, useRef,useState } from \"react\";\r\n\r\n// const VideoPlayer = () => {\r\n//   const videoRef = useRef(null);\r\n//   const websocketRef = useRef(null);\r\n//   const [videoURL, setVideoURL] = useState(null);\r\n//   const [arr, setArr] = useState(null);\r\n// /////////////////// decoding base-64\r\n// const binaryMessage = \"\"\r\n// useEffect(() => {\r\n//   if (videoRef.current && binaryMessage) {\r\n//     // const base64Data = btoa(binaryMessage);\r\n//     // setBase64Data(base64Data);\r\n//     // Decode the base64 data\r\n//     const binaryDatas = atob(binaryMessage);\r\n//     console.log(binaryDatas)\r\n//     const binaryData = atob(binaryDatas)\r\n//     console.log(binaryData)\r\n//     // Convert the binary data to a Uint8Array buffer\r\n//     const arrayBuffer = new Uint8Array(binaryData.length);\r\n//     for (let i = 0; i < binaryData.length; i++) {\r\n//       arrayBuffer[i] = binaryData.charCodeAt(i);\r\n//     }\r\n\r\n//     // Create a Blob from the Uint8Array buffer\r\n//     const videoBlob = new Blob([arrayBuffer], { type: 'video/mp4' });\r\n\r\n//     // Create an object URL from the Blob\r\n//     const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n//     // Set the video source to the object URL\r\n//     videoRef.current.src = videoURL;\r\n\r\n//     // Play the video\r\n//     videoRef.current.play();\r\n//   }\r\n// }, [binaryMessage]);\r\n// ///////////////////////////////only websocket\r\n// // useEffect(() => {\r\n// //   // Create a WebSocket connection\r\n// //   const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n// //   socket.onopen = () => {\r\n// //     console.log(\"Connected to server\");\r\n// //   };\r\n\r\n// //   socket.onmessage = (event) => {\r\n// //     // Receive video data from the server\r\n// //     const data = event.data;\r\n// //     videoRef.current.src = URL.createObjectURL(data);\r\n// //   };\r\n\r\n// //   socket.onclose = () => {\r\n// //     console.log(\"Disconnected from server\");\r\n// //   };\r\n\r\n// //   websocketRef.current = socket;\r\n// //   console.log({ socket });\r\n\r\n// //   return () => {\r\n// //     // Clean up the WebSocket connection\r\n// //     websocketRef.current.close();\r\n// //   };\r\n// // }, []);\r\n// //////////////////////with [arr] it plays first part video\r\n// //   useEffect(() => {\r\n// //     // Create a WebSocket connection\r\n// //     const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n// //     socket.onopen = () => {\r\n// //       console.log(\"Connected to server\");\r\n// //     };\r\n\r\n// //     socket.onmessage = (event) => {\r\n// //       // Receive video data from the server\r\n// //       const data = event.data;\r\n// //       const fileReader = new FileReader();\r\n\r\n// //       // Set up the onload event to handle the result when it's ready\r\n// //       fileReader.onload = function(event) {\r\n// //         // The result contains the Base64 encoded data\r\n// //         const base64Datas = event.target.result;\r\n\r\n// //         const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\r\n// //         //  const base64Data = \"GkXfo6NChoEBQveBAULygQRC84EIQoKEd2VJKQg\"\r\n// //         console.log(base64Data);\r\n// //         const binaryData = atob(base64Data);\r\n// // console.log(binaryData)\r\n// //       // Convert the binary data to a Uint8Array buffer\r\n// //       const arrayBuffer = new Uint8Array(binaryData.length);\r\n// //       for (let i = 0; i < binaryData.length; i++) {\r\n// //         arrayBuffer[i] = binaryData.charCodeAt(i);\r\n// //       }\r\n// //       setArr(arrayBuffer)\r\n// //       // Create a Blob from the Uint8Array buffer\r\n// //       const videoBlob = new Blob([arrayBuffer],  {type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'});\r\n\r\n// //       // Create an object URL from the Blob\r\n// //       const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n// //       setVideoURL(videoURL);\r\n// //       // Set the video source to the object URL\r\n// //       // videoRef.current.src = videoURL;\r\n\r\n// //       // videoRef.current.play();\r\n\r\n// //       };\r\n// //       // Read the Blob data as Base64\r\n// //       fileReader.readAsDataURL(data);\r\n// //     };\r\n\r\n// //     socket.onclose = () => {\r\n// //       console.log(\"Disconnected from server\");\r\n// //     };\r\n\r\n// //     websocketRef.current = socket;\r\n\r\n// //     return () => {\r\n// //       // Clean up the WebSocket connection\r\n// //       websocketRef.current.close();\r\n// //     };\r\n// //   }, [arr]);\r\n//   const handlePlayVideo = () => {\r\n//     if (videoURL) {\r\n//       // Play the video if the URL is available\r\n//       videoRef.current.src = videoURL;\r\n//       videoRef.current.play()\r\n//         .catch(error => {\r\n//           console.error(\"Error while playing video:\", error);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//      <div>\r\n//       {/* Video element with controls */}\r\n//       <video ref={videoRef} controls muted />\r\n\r\n//       {/* Play button */}\r\n//       {/* <button onClick={handlePlayVideo}>Play Video</button> */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoPlayer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMO,YAAY,GAAGP,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMQ,cAAc,GAAGR,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;EACnCS,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;EAC3B,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChDQ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EACnBZ,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMc,MAAM,GAAE,IAAIC,SAAS,CAAC,0BAA0B,CAAC;IAGvDD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBF,MAAM,CAACG,IAAI,CAAC,iBAAiB,CAAC;MAC9BP,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAEDG,MAAM,CAACI,SAAS,GAAIC,KAAK,IAAK;MAC5B;MACA,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI;MAEvB,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;MACnC;MACAD,UAAU,CAACE,MAAM,GAAG,UAASJ,KAAK,EAAE;QAClC;QACA,MAAMK,UAAU,GAAGL,KAAK,CAACM,MAAM,CAACC,MAAM;QACtC;QACA;QACA;;QAEAhB,OAAO,CAACC,GAAG,CAACa,UAAU,CAAC;QACvB,MAAMG,WAAW,GAAGC,IAAI,CAACJ,UAAU,CAAC;QACpCd,OAAO,CAACC,GAAG,CAACgB,WAAW,CAAC;QACxB,MAAME,UAAU,GAAGD,IAAI,CAACD,WAAW,CAAC;QACpCjB,OAAO,CAACC,GAAG,CAACkB,UAAU,CAAC;QACvB;QACA,MAAMC,WAAW,GAAG,IAAIC,UAAU,CAACF,UAAU,CAACG,MAAM,CAAC;QACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC1CH,WAAW,CAACG,CAAC,CAAC,GAAGJ,UAAU,CAACK,UAAU,CAACD,CAAC,CAAC;QAC3C;;QAEA;QACAxB,cAAc,CAAC0B,OAAO,CAACC,IAAI,CAACN,WAAW,CAAC;;QAExC;QACA,MAAMO,cAAc,GAAG,IAAIN,UAAU,CAACtB,cAAc,CAAC0B,OAAO,CAACG,MAAM,CAAC,CAACC,WAAW,EAAEC,KAAK,KAAKD,WAAW,GAAGC,KAAK,CAACR,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3H,IAAIS,MAAM,GAAG,CAAC;QACdhC,cAAc,CAAC0B,OAAO,CAACO,OAAO,CAACF,KAAK,IAAI;UACtCH,cAAc,CAACM,GAAG,CAACH,KAAK,EAAEC,MAAM,CAAC;UACjCA,MAAM,IAAID,KAAK,CAACR,MAAM;QACxB,CAAC,CAAC;;QAEF;QACA,MAAMY,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACR,cAAc,CAAC,EAAE;UAAES,IAAI,EAAE;QAAY,CAAC,CAAC;QACnEpC,OAAO,CAACC,GAAG,CAACiC,SAAS,CAACE,IAAI,CAAC;;QAE3B;QACA,MAAMlC,QAAQ,GAAGmC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC;;QAE/C;QACA/B,WAAW,CAACD,QAAQ,CAAC;MACvB,CAAC;;MAED;MACAS,UAAU,CAAC4B,aAAa,CAAC7B,IAAI,CAAC;IAChC,CAAC;IAEDN,MAAM,CAACoC,OAAO,GAAG,MAAM;MACrBxC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC;IAEDH,YAAY,CAAC2B,OAAO,GAAGrB,MAAM;IAE7B,OAAO,MAAM;MACX;MACAN,YAAY,CAAC2B,OAAO,CAACgB,KAAK,CAAC,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIxC,QAAQ,EAAE;MACZ;MACAL,QAAQ,CAAC4B,OAAO,CAACkB,GAAG,GAAGzC,QAAQ;MAC/BL,QAAQ,CAAC4B,OAAO,CAACmB,IAAI,CAAC,CAAC,CACpBC,KAAK,CAACC,KAAK,IAAI;QACd9C,OAAO,CAAC8C,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACEpD,OAAA;IAAAqD,QAAA,gBAEErD,OAAA;MAAOsD,GAAG,EAAEnD,QAAS;MAACoD,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGjC3D,OAAA;MAAQ4D,OAAO,EAAEZ,eAAgB;MAAAK,QAAA,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACzD,EAAA,CApGID,WAAW;AAAA4D,EAAA,GAAX5D,WAAW;AAsGjB,eAAeA,WAAW;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}