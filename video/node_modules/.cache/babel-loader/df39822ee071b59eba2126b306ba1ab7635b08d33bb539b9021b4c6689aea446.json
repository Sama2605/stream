{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msado\\\\OneDrive\\\\Pulpit\\\\video-stream\\\\video\\\\src\\\\components\\\\VideoPlayer.jsx\",\n  _s = $RefreshSig$();\n// Random ints working///////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n\n// const VideoBlob = () => {\n//   const [currentData, setCurrentData] = useState([]);\n\n//   useEffect(() => {\n//     const ws = new WebSocket(\"ws://localhost:8888/\");\n\n//     ws.onopen = () => {\n//       console.log('Opened Connection!');\n//     };\n\n//     ws.onmessage = (event) => {\n//       setCurrentData(JSON.parse(event.data));\n//     };\n\n//     ws.onclose = () => {\n//       console.log('Closed Connection!');\n//     };\n\n//     return () => {\n//       ws.close();\n//     };\n//   }, []);\n\n//   console.log(currentData);\n\n//   return (\n//     <div>\n//       {currentData.map((cd)=>(\n//         <div>\n//           <p>{cd.name}</p>\n//           <p>{cd.number}</p>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default VideoBlob;\n\n// PING_PONG////////////////////////////////////////////////\n// import React, { useEffect, useRef } from 'react';\n\n// function VideoBlob() {\n//   const socketRef = useRef(null);\n\n//   useEffect(() => {\n//     // Create a WebSocket connection\n//     socketRef.current = new WebSocket('ws://localhost:8000');\n\n//     // Listen for messages from the server\n//     socketRef.current.onmessage = function (event) {\n//       console.log('Received: ', event.data);\n//     };\n\n//     // Clean up the WebSocket connection when the component is unmounted\n//     return () => {\n//       socketRef.current.close();\n//     };\n//   }, []);\n\n//   const sendPing = () => {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       // Send a ping message to the server\n//       socketRef.current.send('ping');\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <button onClick={sendPing}>Send Ping</button>\n//     </div>\n//   );\n// }\n\n// export default VideoBlob;\n\n// App.js chunks are coming frm server but problem is here\n// import React, { useEffect, useRef } from \"react\";\n\n// function VideoBlob() {\n//   const videoRef = useRef(null);\n//   const wsRef = useRef(null);\n//   const receivedChunks = useRef([]);\n//   const totalBytesReceived = useRef(0);\n\n//   useEffect(() => {\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\n\n//     wsRef.current.onmessage = (event) => {\n//       const videoChunk = event.data;\n//       receivedChunks.current.push(videoChunk);\n//       totalBytesReceived.current += videoChunk.length;\n\n//       // Check if all chunks are received (e.g., by comparing total received bytes with expected size)\n//       // If all chunks are received, proceed to create and play the video\n\n//         const concatenatedChunks = new Uint8Array(totalBytesReceived.current);\n//         let offset = 0;\n//         for (const chunk of receivedChunks.current) {\n//           concatenatedChunks.set(chunk, offset);\n//           offset += chunk.length;\n//         }\n\n//         // Create a Blob from the concatenated chunks\n//         const videoBlob = new Blob([concatenatedChunks], { type: \"video/mp4\" });\n\n//         // Create a Blob URL\n//         const videoUrl = URL.createObjectURL(videoBlob);\n\n//         // Set the video element's src attribute to the Blob URL\n//         videoRef.current.src = videoUrl;\n\n//     };\n\n//     return () => {\n//       wsRef.current.close();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} controls />\n//     </div>\n//   );\n// }\n\n// export default VideoBlob;\n\n// //////////////////dane przychodza ale nie odtwarza video\n// import React, { useEffect, useRef } from \"react\";\n\n// function VideoPlayer() {\n//   const videoRef = useRef(null);\n//   const wsRef = useRef(null);\n//   const mediaSourceRef = useRef(null);\n//   const sourceBufferRef = useRef(null);\n//   const bufferQueueRef = useRef([]);\n//   const isAppendingRef = useRef(false);\n//   const isSourceOpenRef = useRef(false);\n\n//   useEffect(() => {\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\n\n//     wsRef.current.onmessage = (event) => {\n//       console.log(event)\n//       if (typeof event.data === \"string\") {\n//         console.log(\"string\")\n//         const message = JSON.parse(event.data);\n\n//         if (message.type === \"metadata\") {\n//           console.log(\"metadata\")\n//           const mediaSource = new MediaSource();\n//           videoRef.current.src = URL.createObjectURL(mediaSource);\n//           mediaSourceRef.current = mediaSource;\n\n//           mediaSource.addEventListener(\"sourceopen\", handleSourceOpen);\n//           mediaSource.addEventListener(\"sourceended\", handleSourceEnded);\n//           mediaSource.addEventListener(\"error\", handleSourceError);\n//         }\n//       } else if (event.data instanceof Blob && sourceBufferRef.current) {\n//         console.log(\"third\")\n//         const videoData = event.data;\n//         bufferQueueRef.current.push(videoData);\n\n//         processBufferQueue();\n//       }\n//     };\n\n//     return () => {\n//       wsRef.current.close();\n//     };\n//   }, []);\n\n//   const handleSourceOpen = () => {\n//     const mediaSource = mediaSourceRef.current;\n//     const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\n//     sourceBufferRef.current = sourceBuffer;\n//     isSourceOpenRef.current = true;\n\n//     sourceBuffer.addEventListener(\"updateend\", processBufferQueue);\n//   };\n\n//   const handleSourceEnded = () => {\n//     console.log(\"MediaSource ended\");\n//   };\n\n//   const handleSourceError = (error) => {\n//     console.error(\"MediaSource error:\", error);\n//   };\n//   const processBufferQueue = async () => {\n//     if (isSourceOpenRef.current && !isAppendingRef.current && bufferQueueRef.current.length > 0) {\n//       const videoData = bufferQueueRef.current.shift();\n//       isAppendingRef.current = true;\n\n//       try {\n//         const response = await fetch(URL.createObjectURL(videoData));\n//         const arrayBuffer = await response.arrayBuffer();\n//         sourceBufferRef.current.appendBuffer(arrayBuffer);\n//       } catch (error) {\n//         console.error(\"Error appending video data to SourceBuffer:\", error);\n//         isAppendingRef.current = false;\n//         processBufferQueue();\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} controls />\n//     </div>\n//   );\n// }\n// export default VideoPlayer;\n\n// /////////////17.07 decoding works fine\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const videoRef = useRef(null);\n  const websocketRef = useRef(null);\n\n  // const base64Data = \"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\"\n  // useEffect(() => {\n  //   if (videoRef.current && base64Data) {\n  //     // Decode the base64 data\n  //     const binaryData = atob(base64Data);\n\n  //     // Convert the binary data to a Uint8Array buffer\n  //     const arrayBuffer = new Uint8Array(binaryData.length);\n  //     for (let i = 0; i < binaryData.length; i++) {\n  //       arrayBuffer[i] = binaryData.charCodeAt(i);\n  //     }\n\n  //     // Create a Blob from the Uint8Array buffer\n  //     const videoBlob = new Blob([arrayBuffer], { type: 'video/webm' });\n\n  //     // Create an object URL from the Blob\n  //     const videoURL = URL.createObjectURL(videoBlob);\n\n  //     // Set the video source to the object URL\n  //     videoRef.current.src = videoURL;\n\n  //     // Play the video\n  //     videoRef.current.play();\n  //   }\n  // }, [base64Data]);\n\n  // useEffect(() => {\n  //   // Create a WebSocket connection\n  //   const socket = new WebSocket(\"ws://localhost:8080\");\n\n  //   socket.onopen = () => {\n  //     console.log(\"Connected to server\");\n  //   };\n\n  //   socket.onmessage = (event) => {\n  //     // Receive video data from the server\n  //     const data = event.data;\n  //     videoRef.current.src = URL.createObjectURL(data);\n  //   };\n\n  //   socket.onclose = () => {\n  //     console.log(\"Disconnected from server\");\n  //   };\n\n  //   websocketRef.current = socket;\n  //   console.log({ socket });\n\n  //   return () => {\n  //     // Clean up the WebSocket connection\n  //     websocketRef.current.close();\n  //   };\n  // }, []);\n  useEffect(() => {\n    // Create a WebSocket connection\n    const socket = new WebSocket(\"ws://localhost:8080\");\n    socket.onopen = () => {\n      console.log(\"Connected to server\");\n    };\n    socket.onmessage = event => {\n      // Receive video data from the server\n      const data = event.data;\n      const fileReader = new FileReader();\n\n      // Set up the onload event to handle the result when it's ready\n      fileReader.onload = function (event) {\n        // The result contains the Base64 encoded data\n        const base64Datas = event.target.result;\n        // const base64Data = \"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\"\n        const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\n        console.log(base64Data);\n        const binaryData = atob(base64Data);\n\n        // Convert the binary data to a Uint8Array buffer\n        const arrayBuffer = new Uint8Array(binaryData.length);\n        for (let i = 0; i < binaryData.length; i++) {\n          arrayBuffer[i] = binaryData.charCodeAt(i);\n        }\n\n        // Create a Blob from the Uint8Array buffer\n        const videoBlob = new Blob([arrayBuffer], {\n          type: 'video/mp4'\n        });\n\n        // Create an object URL from the Blob\n        const videoURL = URL.createObjectURL(videoBlob);\n\n        // Set the video source to the object URL\n        videoRef.current.src = videoURL;\n\n        // Video is ready to play, set the flag to true\n        setCanPlay(true);\n\n        // Set the video source to the Base64 data URL\n        // videoRef.current.src = base64Data;\n\n        //       // Create a new video element\n        //     const videoElement = document.createElement(\"video\");\n        //     // Set the video source to the Base64 data URL\n        //       // Set the 'src' attribute to the Base64 data URL\n        //  videoElement.src = base64Data;\n\n        //  // Set other video attributes if needed\n        //  videoElement.controls = true;\n        //  videoElement.autoPlay = true;\n\n        //  // Append the video element to the document body or a specific container\n        //  document.body.appendChild(videoElement);\n      };\n\n      // Read the Blob data as Base64\n      fileReader.readAsDataURL(data);\n\n      // changing blob to text.works\n      // videoRef.current.src = URL.createObjectURL(data);\n      // const textData = data.text()\n      // textData.then((res)=>{\n\n      //   console.log(res)\n      // })\n    };\n\n    socket.onclose = () => {\n      console.log(\"Disconnected from server\");\n    };\n    websocketRef.current = socket;\n    console.log({\n      socket\n    });\n    return () => {\n      // Clean up the WebSocket connection\n      websocketRef.current.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"tqMgLWmKoVko53x0Xaoars4NEKk=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\n\n// REACTPLAYER for hls\n\n// import ReactPlayer from 'react-player';\n// import React, { useEffect, useRef } from \"react\";\n\n// const VideoPlayer = () => {\n//   //   const videoRef = useRef(null);\n//   // const websocketRef = useRef(null);\n\n//   //  useEffect(() => {\n//   //   // Create a WebSocket connection\n//   //   const socket = new WebSocket(\"ws://localhost:8000\");\n\n//   //   socket.onopen = () => {\n//   //     console.log(\"Connected to server\");\n//   //   };\n\n//   //   socket.onmessage = (event) => {\n//   //     // Receive video data from the server\n//   //     const data = event.data;\n//   //     videoRef.current.src = URL.createObjectURL(data);\n//   //   };\n\n//   //   socket.onclose = () => {\n//   //     console.log(\"Disconnected from server\");\n//   //   };\n\n//   //   websocketRef.current = socket;\n//   //   console.log({ socket });\n\n//   //   return () => {\n//   //     // Clean up the WebSocket connection\n//   //     websocketRef.current.close();\n//   //   };\n//   // }, []);\n//   return (\n//     <ReactPlayer\n//       // url='<https://www.youtube.com/watch?v=dQw4w9WgXcQ>'\n//       // url='https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'\n//       // url='http://192.168.128.149:8888/startvideo/?token=test&deviceid=2'\n//       url=\"http://localhost:8000\"\n//       controls\n//       playing\n//       width=\"100%\"\n//       height=\"auto\"\n//     />\n//   );\n// };\n\n// export default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","VideoPlayer","_s","videoRef","websocketRef","socket","WebSocket","onopen","console","log","onmessage","event","data","fileReader","FileReader","onload","base64Datas","target","result","base64Data","replace","binaryData","atob","arrayBuffer","Uint8Array","length","i","charCodeAt","videoBlob","Blob","type","videoURL","URL","createObjectURL","current","src","setCanPlay","readAsDataURL","onclose","close","children","ref","controls","autoPlay","muted","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/msado/OneDrive/Pulpit/video-stream/video/src/components/VideoPlayer.jsx"],"sourcesContent":["// Random ints working///////////////////////////////////\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const VideoBlob = () => {\r\n//   const [currentData, setCurrentData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const ws = new WebSocket(\"ws://localhost:8888/\");\r\n\r\n//     ws.onopen = () => {\r\n//       console.log('Opened Connection!');\r\n//     };\r\n\r\n//     ws.onmessage = (event) => {\r\n//       setCurrentData(JSON.parse(event.data));\r\n//     };\r\n\r\n//     ws.onclose = () => {\r\n//       console.log('Closed Connection!');\r\n//     };\r\n\r\n//     return () => {\r\n//       ws.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   console.log(currentData);\r\n\r\n//   return (\r\n//     <div>\r\n//       {currentData.map((cd)=>(\r\n//         <div>\r\n//           <p>{cd.name}</p>\r\n//           <p>{cd.number}</p>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoBlob;\r\n\r\n// PING_PONG////////////////////////////////////////////////\r\n// import React, { useEffect, useRef } from 'react';\r\n\r\n// function VideoBlob() {\r\n//   const socketRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Create a WebSocket connection\r\n//     socketRef.current = new WebSocket('ws://localhost:8000');\r\n\r\n//     // Listen for messages from the server\r\n//     socketRef.current.onmessage = function (event) {\r\n//       console.log('Received: ', event.data);\r\n//     };\r\n\r\n//     // Clean up the WebSocket connection when the component is unmounted\r\n//     return () => {\r\n//       socketRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const sendPing = () => {\r\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\r\n//       // Send a ping message to the server\r\n//       socketRef.current.send('ping');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <button onClick={sendPing}>Send Ping</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoBlob;\r\n\r\n// App.js chunks are coming frm server but problem is here\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// function VideoBlob() {\r\n//   const videoRef = useRef(null);\r\n//   const wsRef = useRef(null);\r\n//   const receivedChunks = useRef([]);\r\n//   const totalBytesReceived = useRef(0);\r\n\r\n//   useEffect(() => {\r\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//     wsRef.current.onmessage = (event) => {\r\n//       const videoChunk = event.data;\r\n//       receivedChunks.current.push(videoChunk);\r\n//       totalBytesReceived.current += videoChunk.length;\r\n\r\n//       // Check if all chunks are received (e.g., by comparing total received bytes with expected size)\r\n//       // If all chunks are received, proceed to create and play the video\r\n\r\n//         const concatenatedChunks = new Uint8Array(totalBytesReceived.current);\r\n//         let offset = 0;\r\n//         for (const chunk of receivedChunks.current) {\r\n//           concatenatedChunks.set(chunk, offset);\r\n//           offset += chunk.length;\r\n//         }\r\n\r\n//         // Create a Blob from the concatenated chunks\r\n//         const videoBlob = new Blob([concatenatedChunks], { type: \"video/mp4\" });\r\n\r\n//         // Create a Blob URL\r\n//         const videoUrl = URL.createObjectURL(videoBlob);\r\n\r\n//         // Set the video element's src attribute to the Blob URL\r\n//         videoRef.current.src = videoUrl;\r\n\r\n//     };\r\n\r\n//     return () => {\r\n//       wsRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={videoRef} controls />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoBlob;\r\n\r\n// //////////////////dane przychodza ale nie odtwarza video\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// function VideoPlayer() {\r\n//   const videoRef = useRef(null);\r\n//   const wsRef = useRef(null);\r\n//   const mediaSourceRef = useRef(null);\r\n//   const sourceBufferRef = useRef(null);\r\n//   const bufferQueueRef = useRef([]);\r\n//   const isAppendingRef = useRef(false);\r\n//   const isSourceOpenRef = useRef(false);\r\n\r\n//   useEffect(() => {\r\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//     wsRef.current.onmessage = (event) => {\r\n//       console.log(event)\r\n//       if (typeof event.data === \"string\") {\r\n//         console.log(\"string\")\r\n//         const message = JSON.parse(event.data);\r\n\r\n//         if (message.type === \"metadata\") {\r\n//           console.log(\"metadata\")\r\n//           const mediaSource = new MediaSource();\r\n//           videoRef.current.src = URL.createObjectURL(mediaSource);\r\n//           mediaSourceRef.current = mediaSource;\r\n\r\n//           mediaSource.addEventListener(\"sourceopen\", handleSourceOpen);\r\n//           mediaSource.addEventListener(\"sourceended\", handleSourceEnded);\r\n//           mediaSource.addEventListener(\"error\", handleSourceError);\r\n//         }\r\n//       } else if (event.data instanceof Blob && sourceBufferRef.current) {\r\n//         console.log(\"third\")\r\n//         const videoData = event.data;\r\n//         bufferQueueRef.current.push(videoData);\r\n\r\n//         processBufferQueue();\r\n//       }\r\n//     };\r\n\r\n//     return () => {\r\n//       wsRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSourceOpen = () => {\r\n//     const mediaSource = mediaSourceRef.current;\r\n//     const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\r\n//     sourceBufferRef.current = sourceBuffer;\r\n//     isSourceOpenRef.current = true;\r\n\r\n//     sourceBuffer.addEventListener(\"updateend\", processBufferQueue);\r\n//   };\r\n\r\n//   const handleSourceEnded = () => {\r\n//     console.log(\"MediaSource ended\");\r\n//   };\r\n\r\n//   const handleSourceError = (error) => {\r\n//     console.error(\"MediaSource error:\", error);\r\n//   };\r\n//   const processBufferQueue = async () => {\r\n//     if (isSourceOpenRef.current && !isAppendingRef.current && bufferQueueRef.current.length > 0) {\r\n//       const videoData = bufferQueueRef.current.shift();\r\n//       isAppendingRef.current = true;\r\n\r\n//       try {\r\n//         const response = await fetch(URL.createObjectURL(videoData));\r\n//         const arrayBuffer = await response.arrayBuffer();\r\n//         sourceBufferRef.current.appendBuffer(arrayBuffer);\r\n//       } catch (error) {\r\n//         console.error(\"Error appending video data to SourceBuffer:\", error);\r\n//         isAppendingRef.current = false;\r\n//         processBufferQueue();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={videoRef} controls />\r\n//     </div>\r\n//   );\r\n// }\r\n// export default VideoPlayer;\r\n\r\n// /////////////17.07 decoding works fine\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nconst VideoPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  const websocketRef = useRef(null);\r\n\r\n  // const base64Data = \"GkXfo6NChoEBQveBAULygQRC84EIQoKEd2VibeyCAABCh4EBQoWBARhTgGcQIQmHEU2bdLtNu4tTq4QVSalmU6yBQE27i1OrhBZUrmtTrIGsTbuNU6uEEU2bdFOsgyEJc027jFOrhBxTu2tTrIINQRVJqWbnc6SQRsadRaGFqSlNPQovdQBWvSrXsYMPQkBEiYRG/cAARGGIBBu7mlIesABNgKVodHRwOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL3lhbWthV0GQU29yZW5zb24gU3F1ZWV6ZRZUrmtMj66414EBc8WHiBmgyaYxwoOBASPjg4QCYloAIzFPhD+AAACGhVZfVlA4JYaIg1ZQOOCIsIICgLqCAWiuTFLXgQJzxYgBiP65XI76uoOBAiMxT4Q/gAAAhohBX1ZPUkJJU2OiTBkCHjoBdm9yYmlzAAAAAAFErAAA/////wD6AAD/////uAEDdm9yYmlzKgAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMTAwMzI1IChFdmVyeXdoZXJlKQAAAAABBXZvcmJpcx9CQ1YBAAABABhjVClGmVLSSokZc5QxRplikkqJpYQWQkidcxRTqTnXnGusubUghBAaU1ApBZlSjlJpGWOQKQWZUhBLSSV0EjonnWMQW0nB1phri0G2HIQNmlJMKcSUUopCCBlTjCnFlFJKQgcldA465hxTjkooQbicc6u1lpZji6l0kkrnJGRMQkgphZJKB6VTTkJINZbWUikdc1JSakHoIIQQQrYghA2C0JBVAAABAMBAEBqyCgBQAAAQiqEYigKEhqwCADIAAASgKI7iKI4jOZJjSRYQGrIKAAACABAAAMBwFEmRFMmxJEvSLEvTRFFVfdU2VVX2dV3XdV3XdSA0ZBUAAAEAQEinmaUaIMIMZBgIDVkFACAAAABGKMIQA0JDVgEAAAEAAGIoOYgmtOZ8c46DZjloKsXmdHAi1eZJbirm5pxzzjknm3PGOOecc4pyZjFoJrTmnHMSg2YpaCa05pxznsTmQWuqtOacc8Y5p4NxRhjnnHOatOZBajbW5pxzFrSmOWouxeaccyLl5kltLtXmnHPOOeecc84555xzqhenc3BOOOecc6L25lpuQhfnnHM+Gad7c0I455xzzjnnnHPOOeecc4LQkFUAABAAAEEYNoZxpyBIn6OBGEWIacikB92jwyRoDHIKqUejo5FS6iCUVMZJKZ0gNGQVAAAIAAAhhBRSSCGFFFJIIYUUUoghhhhiyCmnnIIKKqmkoooyyiyzzDLLLLPMMuuws8467DDEEEMMrbQSS0211VhjrbnnnGsO0lpprbXWSimllFJKKQgNWQUAgAAAEAgZZJBBRiGFFFKIIaaccsopqKACQkNWAQCAAAACAAAAPMlzREd0REd0REd0REd0RMdzPEeUREmUREm0TMvUTE8VVdWVXVvWZd32bWEXdt33dd/3dePXhWFZlmVZlmVZlmVZlmVZlmVZgtCQVQAACAAAgBBCCCGFFFJIIaUYY8wx56CTUEIgNGQVAAAIACAAAADAURzFcSRHciTJkixJkzRLszzN0zxN9ERRFE3TVEVXdEXdtEXZlE3XdE3ZdFVZtV1Ztm3Z1m1flm3f933f933f933f933f93UdCA1ZBQBIAADoSI6kSIqkSI7jOJIkAaEhqwAAGQAAAQAoiqM4juNIkiRJlqRJnuVZomZqpmd6qqgCoSGrAABAAAABAAAAAAAomuIppuIpouI5oiNKomVaoqZqriibsuu6ruu6ruu6ruu6ruu6ruu6ruu6ruu6ruu6ruu6ruu6ruu6LhAasgoAkAAA0JEcyZEcSZEUSZEcyQFCQ1YBADIAAAIAcAzHkBTJsSxL0zzN0zxN9ERP9ExPFV3RBUJDVgEAgAAAAgAAAAAAMCTDUixHczRJlFRLtVRNtVRLFVVPVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVNU3TNE0gNGQlAAAEAMBijcHlICElJeXeEMIQk54xJiG1XiEEkZLeMQYVg54yogxy3kLjEIMeCA1ZEQBEAQAAxiDHEHPIOUepkxI556h0lBrnHKWOUmcpxZhizSiV2FKsjXOOUketo5RiLC12lFKNqcYCAAACHAAAAiyEQkNWBABRAACEMUgppBRijDmnnEOMKeeYc4Yx5hxzjjnnoHRSKuecdE5KxBhzjjmnnHNSOieVc05KJ6EAAIAABwCAAAuh0JAVAUCcAIBBkjxP8jRRlDRPFEVTdF1RNF3X8jzV9ExTVT3RVFVTVW3ZVFVZljzPND3TVFXPNFXVVFVZNlVVlkVV1W3TdXXbdFXdlm3b911bFnZRVW3dVF3bN1XX9l3Z9n1Z1nVj8jxV9UzTdT3TdGXVdW1bdV1d90xTlk3XlWXTdW3blWVdd2XZ9zXTdF3TVWXZdF3ZdmVXt11Z9n3TdYXflWVfV2VZGHZd94Vb15XldF3dV2VXN1ZZ9n1b14Xh1nVhmTxPVT3TdF3PNF1XdV1fV13X1jXTlGXTdW3ZVF1ZdmXZ911X1nXPNGXZdF3bNl1Xll1Z9n1XlnXddF1fV2VZ+FVX9nVZ15Xh1m3hN13X91VZ9oVXlnXh1nVhuXVdGD5V9X1TdoXhdGXf14XfWW5dOJbRdX1hlW3hWGVZOX7hWJbd95VldF1fWG3ZGFZZFoZf+J3l9n3jeHVdGW7d58y67wzH76T7ytPVbWOZfd1ZZl93juEYOr/w46mqr5uuKwynLAu/7evGs/u+soyu6/\"\r\n  // useEffect(() => {\r\n  //   if (videoRef.current && base64Data) {\r\n  //     // Decode the base64 data\r\n  //     const binaryData = atob(base64Data);\r\n\r\n  //     // Convert the binary data to a Uint8Array buffer\r\n  //     const arrayBuffer = new Uint8Array(binaryData.length);\r\n  //     for (let i = 0; i < binaryData.length; i++) {\r\n  //       arrayBuffer[i] = binaryData.charCodeAt(i);\r\n  //     }\r\n\r\n  //     // Create a Blob from the Uint8Array buffer\r\n  //     const videoBlob = new Blob([arrayBuffer], { type: 'video/webm' });\r\n\r\n  //     // Create an object URL from the Blob\r\n  //     const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n  //     // Set the video source to the object URL\r\n  //     videoRef.current.src = videoURL;\r\n\r\n  //     // Play the video\r\n  //     videoRef.current.play();\r\n  //   }\r\n  // }, [base64Data]);\r\n\r\n  // useEffect(() => {\r\n  //   // Create a WebSocket connection\r\n  //   const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n  //   socket.onopen = () => {\r\n  //     console.log(\"Connected to server\");\r\n  //   };\r\n\r\n  //   socket.onmessage = (event) => {\r\n  //     // Receive video data from the server\r\n  //     const data = event.data;\r\n  //     videoRef.current.src = URL.createObjectURL(data);\r\n  //   };\r\n\r\n  //   socket.onclose = () => {\r\n  //     console.log(\"Disconnected from server\");\r\n  //   };\r\n\r\n  //   websocketRef.current = socket;\r\n  //   console.log({ socket });\r\n\r\n  //   return () => {\r\n  //     // Clean up the WebSocket connection\r\n  //     websocketRef.current.close();\r\n  //   };\r\n  // }, []);\r\n  useEffect(() => {\r\n    // Create a WebSocket connection\r\n    const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n    socket.onopen = () => {\r\n      console.log(\"Connected to server\");\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      // Receive video data from the server\r\n      const data = event.data;\r\n      const fileReader = new FileReader();\r\n\r\n      // Set up the onload event to handle the result when it's ready\r\n      fileReader.onload = function(event) {\r\n        // The result contains the Base64 encoded data\r\n        const base64Datas = event.target.result;\r\n        // const base64Data = \"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\"\r\n        const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\r\n        console.log(base64Data);\r\n        const binaryData = atob(base64Data);\r\n\r\n      // Convert the binary data to a Uint8Array buffer\r\n      const arrayBuffer = new Uint8Array(binaryData.length);\r\n      for (let i = 0; i < binaryData.length; i++) {\r\n        arrayBuffer[i] = binaryData.charCodeAt(i);\r\n      }\r\n\r\n      // Create a Blob from the Uint8Array buffer\r\n      const videoBlob = new Blob([arrayBuffer], { type: 'video/mp4' });\r\n\r\n      // Create an object URL from the Blob\r\n      const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n      // Set the video source to the object URL\r\n      videoRef.current.src = videoURL;\r\n\r\n       // Video is ready to play, set the flag to true\r\n       setCanPlay(true);\r\n\r\n         // Set the video source to the Base64 data URL\r\n        // videoRef.current.src = base64Data;\r\n\r\n  //       // Create a new video element\r\n  //     const videoElement = document.createElement(\"video\");\r\n  //     // Set the video source to the Base64 data URL\r\n  //       // Set the 'src' attribute to the Base64 data URL\r\n  //  videoElement.src = base64Data;\r\n\r\n  //  // Set other video attributes if needed\r\n  //  videoElement.controls = true;\r\n  //  videoElement.autoPlay = true;\r\n\r\n  //  // Append the video element to the document body or a specific container\r\n  //  document.body.appendChild(videoElement);\r\n\r\n   \r\n      };\r\n    \r\n      // Read the Blob data as Base64\r\n      fileReader.readAsDataURL(data);\r\n\r\n      // changing blob to text.works\r\n      // videoRef.current.src = URL.createObjectURL(data);\r\n      // const textData = data.text()\r\n      // textData.then((res)=>{\r\n        \r\n      //   console.log(res)\r\n      // })\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log(\"Disconnected from server\");\r\n    };\r\n\r\n    websocketRef.current = socket;\r\n    console.log({ socket });\r\n\r\n    return () => {\r\n      // Clean up the WebSocket connection\r\n      websocketRef.current.close();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <video ref={videoRef} controls autoPlay muted/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n\r\n// REACTPLAYER for hls\r\n\r\n// import ReactPlayer from 'react-player';\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// const VideoPlayer = () => {\r\n//   //   const videoRef = useRef(null);\r\n//   // const websocketRef = useRef(null);\r\n\r\n//   //  useEffect(() => {\r\n//   //   // Create a WebSocket connection\r\n//   //   const socket = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//   //   socket.onopen = () => {\r\n//   //     console.log(\"Connected to server\");\r\n//   //   };\r\n\r\n//   //   socket.onmessage = (event) => {\r\n//   //     // Receive video data from the server\r\n//   //     const data = event.data;\r\n//   //     videoRef.current.src = URL.createObjectURL(data);\r\n//   //   };\r\n\r\n//   //   socket.onclose = () => {\r\n//   //     console.log(\"Disconnected from server\");\r\n//   //   };\r\n\r\n//   //   websocketRef.current = socket;\r\n//   //   console.log({ socket });\r\n\r\n//   //   return () => {\r\n//   //     // Clean up the WebSocket connection\r\n//   //     websocketRef.current.close();\r\n//   //   };\r\n//   // }, []);\r\n//   return (\r\n//     <ReactPlayer\r\n//       // url='<https://www.youtube.com/watch?v=dQw4w9WgXcQ>'\r\n//       // url='https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'\r\n//       // url='http://192.168.128.149:8888/startvideo/?token=test&deviceid=2'\r\n//       url=\"http://localhost:8000\"\r\n//       controls\r\n//       playing\r\n//       width=\"100%\"\r\n//       height=\"auto\"\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default VideoPlayer;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMM,YAAY,GAAGN,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}