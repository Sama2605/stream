{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msado\\\\OneDrive\\\\Pulpit\\\\video-stream\\\\video\\\\src\\\\components\\\\VideoPlayer.jsx\",\n  _s = $RefreshSig$();\n// Random ints working///////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n\n// const VideoBlob = () => {\n//   const [currentData, setCurrentData] = useState([]);\n\n//   useEffect(() => {\n//     const ws = new WebSocket(\"ws://localhost:8888/\");\n\n//     ws.onopen = () => {\n//       console.log('Opened Connection!');\n//     };\n\n//     ws.onmessage = (event) => {\n//       setCurrentData(JSON.parse(event.data));\n//     };\n\n//     ws.onclose = () => {\n//       console.log('Closed Connection!');\n//     };\n\n//     return () => {\n//       ws.close();\n//     };\n//   }, []);\n\n//   console.log(currentData);\n\n//   return (\n//     <div>\n//       {currentData.map((cd)=>(\n//         <div>\n//           <p>{cd.name}</p>\n//           <p>{cd.number}</p>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default VideoBlob;\n\n// PING_PONG////////////////////////////////////////////////\n// import React, { useEffect, useRef } from 'react';\n\n// function VideoBlob() {\n//   const socketRef = useRef(null);\n\n//   useEffect(() => {\n//     // Create a WebSocket connection\n//     socketRef.current = new WebSocket('ws://localhost:8000');\n\n//     // Listen for messages from the server\n//     socketRef.current.onmessage = function (event) {\n//       console.log('Received: ', event.data);\n//     };\n\n//     // Clean up the WebSocket connection when the component is unmounted\n//     return () => {\n//       socketRef.current.close();\n//     };\n//   }, []);\n\n//   const sendPing = () => {\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\n//       // Send a ping message to the server\n//       socketRef.current.send('ping');\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <button onClick={sendPing}>Send Ping</button>\n//     </div>\n//   );\n// }\n\n// export default VideoBlob;\n\n// App.js chunks are coming frm server but problem is here\n// import React, { useEffect, useRef } from \"react\";\n\n// function VideoBlob() {\n//   const videoRef = useRef(null);\n//   const wsRef = useRef(null);\n//   const receivedChunks = useRef([]);\n//   const totalBytesReceived = useRef(0);\n\n//   useEffect(() => {\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\n\n//     wsRef.current.onmessage = (event) => {\n//       const videoChunk = event.data;\n//       receivedChunks.current.push(videoChunk);\n//       totalBytesReceived.current += videoChunk.length;\n\n//       // Check if all chunks are received (e.g., by comparing total received bytes with expected size)\n//       // If all chunks are received, proceed to create and play the video\n\n//         const concatenatedChunks = new Uint8Array(totalBytesReceived.current);\n//         let offset = 0;\n//         for (const chunk of receivedChunks.current) {\n//           concatenatedChunks.set(chunk, offset);\n//           offset += chunk.length;\n//         }\n\n//         // Create a Blob from the concatenated chunks\n//         const videoBlob = new Blob([concatenatedChunks], { type: \"video/mp4\" });\n\n//         // Create a Blob URL\n//         const videoUrl = URL.createObjectURL(videoBlob);\n\n//         // Set the video element's src attribute to the Blob URL\n//         videoRef.current.src = videoUrl;\n\n//     };\n\n//     return () => {\n//       wsRef.current.close();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} controls />\n//     </div>\n//   );\n// }\n\n// export default VideoBlob;\n\n// //////////////////dane przychodza ale nie odtwarza video\n// import React, { useEffect, useRef } from \"react\";\n\n// function VideoPlayer() {\n//   const videoRef = useRef(null);\n//   const wsRef = useRef(null);\n//   const mediaSourceRef = useRef(null);\n//   const sourceBufferRef = useRef(null);\n//   const bufferQueueRef = useRef([]);\n//   const isAppendingRef = useRef(false);\n//   const isSourceOpenRef = useRef(false);\n\n//   useEffect(() => {\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\n\n//     wsRef.current.onmessage = (event) => {\n//       console.log(event)\n//       if (typeof event.data === \"string\") {\n//         console.log(\"string\")\n//         const message = JSON.parse(event.data);\n\n//         if (message.type === \"metadata\") {\n//           console.log(\"metadata\")\n//           const mediaSource = new MediaSource();\n//           videoRef.current.src = URL.createObjectURL(mediaSource);\n//           mediaSourceRef.current = mediaSource;\n\n//           mediaSource.addEventListener(\"sourceopen\", handleSourceOpen);\n//           mediaSource.addEventListener(\"sourceended\", handleSourceEnded);\n//           mediaSource.addEventListener(\"error\", handleSourceError);\n//         }\n//       } else if (event.data instanceof Blob && sourceBufferRef.current) {\n//         console.log(\"third\")\n//         const videoData = event.data;\n//         bufferQueueRef.current.push(videoData);\n\n//         processBufferQueue();\n//       }\n//     };\n\n//     return () => {\n//       wsRef.current.close();\n//     };\n//   }, []);\n\n//   const handleSourceOpen = () => {\n//     const mediaSource = mediaSourceRef.current;\n//     const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\n//     sourceBufferRef.current = sourceBuffer;\n//     isSourceOpenRef.current = true;\n\n//     sourceBuffer.addEventListener(\"updateend\", processBufferQueue);\n//   };\n\n//   const handleSourceEnded = () => {\n//     console.log(\"MediaSource ended\");\n//   };\n\n//   const handleSourceError = (error) => {\n//     console.error(\"MediaSource error:\", error);\n//   };\n//   const processBufferQueue = async () => {\n//     if (isSourceOpenRef.current && !isAppendingRef.current && bufferQueueRef.current.length > 0) {\n//       const videoData = bufferQueueRef.current.shift();\n//       isAppendingRef.current = true;\n\n//       try {\n//         const response = await fetch(URL.createObjectURL(videoData));\n//         const arrayBuffer = await response.arrayBuffer();\n//         sourceBufferRef.current.appendBuffer(arrayBuffer);\n//       } catch (error) {\n//         console.error(\"Error appending video data to SourceBuffer:\", error);\n//         isAppendingRef.current = false;\n//         processBufferQueue();\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} controls />\n//     </div>\n//   );\n// }\n// export default VideoPlayer;\n\n// /////////////17.07 decoding works fine\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const videoRef = useRef(null);\n  const websocketRef = useRef(null);\n  const [videoURL, setVideoURL] = useState(null);\n  // const base64Data = \"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\"\n  // useEffect(() => {\n  //   if (videoRef.current && base64Data) {\n  //     // Decode the base64 data\n  //     const binaryData = atob(base64Data);\n  //     // Convert the binary data to a Uint8Array buffer\n  //     const arrayBuffer = new Uint8Array(binaryData.length);\n  //     for (let i = 0; i < binaryData.length; i++) {\n  //       arrayBuffer[i] = binaryData.charCodeAt(i);\n  //     }\n\n  //     // Create a Blob from the Uint8Array buffer\n  //     const videoBlob = new Blob([arrayBuffer], { type: 'video/mp4' });\n\n  //     // Create an object URL from the Blob\n  //     const videoURL = URL.createObjectURL(videoBlob);\n\n  //     // Set the video source to the object URL\n  //     videoRef.current.src = videoURL;\n\n  //     // Play the video\n  //     videoRef.current.play();\n  //   }\n  // }, [base64Data]);\n  // ///////////////////////////////\n  // useEffect(() => {\n  //   // Create a WebSocket connection\n  //   const socket = new WebSocket(\"ws://localhost:8080\");\n\n  //   socket.onopen = () => {\n  //     console.log(\"Connected to server\");\n  //   };\n\n  //   socket.onmessage = (event) => {\n  //     // Receive video data from the server\n  //     const data = event.data;\n  //     videoRef.current.src = URL.createObjectURL(data);\n  //   };\n\n  //   socket.onclose = () => {\n  //     console.log(\"Disconnected from server\");\n  //   };\n\n  //   websocketRef.current = socket;\n  //   console.log({ socket });\n\n  //   return () => {\n  //     // Clean up the WebSocket connection\n  //     websocketRef.current.close();\n  //   };\n  // }, []);\n  // //////////////////////\n  useEffect(() => {\n    // Create a WebSocket connection\n    const socket = new WebSocket(\"ws://localhost:8080\");\n    socket.onopen = () => {\n      console.log(\"Connected to server\");\n    };\n    socket.onmessage = event => {\n      // Receive video data from the server\n      const data = event.data;\n      const fileReader = new FileReader();\n\n      // Set up the onload event to handle the result when it's ready\n      fileReader.onload = function (event) {\n        // The result contains the Base64 encoded data\n        const base64Datas = event.target.result;\n        // const base64Data = \"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\"\n        const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\n        //  const base64Data = \"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\"\n        console.log(base64Data);\n        const binaryData = atob(base64Data);\n        console.log(binaryData);\n        // Convert the binary data to a Uint8Array buffer\n        const arrayBuffer = new Uint8Array(binaryData.length);\n        for (let i = 0; i < binaryData.length; i++) {\n          arrayBuffer[i] = binaryData.charCodeAt(i);\n        }\n        console.log(arrayBuffer);\n        // Create a Blob from the Uint8Array buffer\n        const videoBlob = new Blob([arrayBuffer], {\n          type: 'video/mp4;  codecs=avc1.42E01E, mp4a.40.2'\n        });\n\n        // Create an object URL from the Blob\n        const videoURL = URL.createObjectURL(videoBlob);\n        setVideoURL(videoURL);\n        // Set the video source to the object URL\n        // videoRef.current.src = videoURL;\n\n        // videoRef.current.play();\n      };\n      // Read the Blob data as Base64\n      fileReader.readAsDataURL(data);\n    };\n    socket.onclose = () => {\n      console.log(\"Disconnected from server\");\n    };\n    websocketRef.current = socket;\n    return () => {\n      // Clean up the WebSocket connection\n      websocketRef.current.close();\n    };\n  }, []);\n  const handlePlayVideo = () => {\n    if (videoURL) {\n      // Play the video if the URL is available\n      videoRef.current.src = videoURL;\n      videoRef.current.play().catch(error => {\n        console.error(\"Error while playing video:\", error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlayVideo,\n      children: \"Play Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"m7ZoV2rx4ZWeVztm5ARKZKEnnaA=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\n\n// REACTPLAYER for hls\n\n// import ReactPlayer from 'react-player';\n// import React, { useEffect, useRef } from \"react\";\n\n// const VideoPlayer = () => {\n//   //   const videoRef = useRef(null);\n//   // const websocketRef = useRef(null);\n\n//   //  useEffect(() => {\n//   //   // Create a WebSocket connection\n//   //   const socket = new WebSocket(\"ws://localhost:8000\");\n\n//   //   socket.onopen = () => {\n//   //     console.log(\"Connected to server\");\n//   //   };\n\n//   //   socket.onmessage = (event) => {\n//   //     // Receive video data from the server\n//   //     const data = event.data;\n//   //     videoRef.current.src = URL.createObjectURL(data);\n//   //   };\n\n//   //   socket.onclose = () => {\n//   //     console.log(\"Disconnected from server\");\n//   //   };\n\n//   //   websocketRef.current = socket;\n//   //   console.log({ socket });\n\n//   //   return () => {\n//   //     // Clean up the WebSocket connection\n//   //     websocketRef.current.close();\n//   //   };\n//   // }, []);\n//   return (\n//     <ReactPlayer\n//       // url='<https://www.youtube.com/watch?v=dQw4w9WgXcQ>'\n//       // url='https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'\n//       // url='http://192.168.128.149:8888/startvideo/?token=test&deviceid=2'\n//       url=\"http://localhost:8000\"\n//       controls\n//       playing\n//       width=\"100%\"\n//       height=\"auto\"\n//     />\n//   );\n// };\n\n// export default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","VideoPlayer","_s","videoRef","websocketRef","videoURL","setVideoURL","socket","WebSocket","onopen","console","log","onmessage","event","data","fileReader","FileReader","onload","base64Datas","target","result","base64Data","replace","binaryData","atob","arrayBuffer","Uint8Array","length","i","charCodeAt","videoBlob","Blob","type","URL","createObjectURL","readAsDataURL","onclose","current","close","handlePlayVideo","src","play","catch","error","children","ref","controls","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/msado/OneDrive/Pulpit/video-stream/video/src/components/VideoPlayer.jsx"],"sourcesContent":["// Random ints working///////////////////////////////////\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const VideoBlob = () => {\r\n//   const [currentData, setCurrentData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const ws = new WebSocket(\"ws://localhost:8888/\");\r\n\r\n//     ws.onopen = () => {\r\n//       console.log('Opened Connection!');\r\n//     };\r\n\r\n//     ws.onmessage = (event) => {\r\n//       setCurrentData(JSON.parse(event.data));\r\n//     };\r\n\r\n//     ws.onclose = () => {\r\n//       console.log('Closed Connection!');\r\n//     };\r\n\r\n//     return () => {\r\n//       ws.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   console.log(currentData);\r\n\r\n//   return (\r\n//     <div>\r\n//       {currentData.map((cd)=>(\r\n//         <div>\r\n//           <p>{cd.name}</p>\r\n//           <p>{cd.number}</p>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoBlob;\r\n\r\n// PING_PONG////////////////////////////////////////////////\r\n// import React, { useEffect, useRef } from 'react';\r\n\r\n// function VideoBlob() {\r\n//   const socketRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Create a WebSocket connection\r\n//     socketRef.current = new WebSocket('ws://localhost:8000');\r\n\r\n//     // Listen for messages from the server\r\n//     socketRef.current.onmessage = function (event) {\r\n//       console.log('Received: ', event.data);\r\n//     };\r\n\r\n//     // Clean up the WebSocket connection when the component is unmounted\r\n//     return () => {\r\n//       socketRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const sendPing = () => {\r\n//     if (socketRef.current.readyState === WebSocket.OPEN) {\r\n//       // Send a ping message to the server\r\n//       socketRef.current.send('ping');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <button onClick={sendPing}>Send Ping</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoBlob;\r\n\r\n// App.js chunks are coming frm server but problem is here\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// function VideoBlob() {\r\n//   const videoRef = useRef(null);\r\n//   const wsRef = useRef(null);\r\n//   const receivedChunks = useRef([]);\r\n//   const totalBytesReceived = useRef(0);\r\n\r\n//   useEffect(() => {\r\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//     wsRef.current.onmessage = (event) => {\r\n//       const videoChunk = event.data;\r\n//       receivedChunks.current.push(videoChunk);\r\n//       totalBytesReceived.current += videoChunk.length;\r\n\r\n//       // Check if all chunks are received (e.g., by comparing total received bytes with expected size)\r\n//       // If all chunks are received, proceed to create and play the video\r\n\r\n//         const concatenatedChunks = new Uint8Array(totalBytesReceived.current);\r\n//         let offset = 0;\r\n//         for (const chunk of receivedChunks.current) {\r\n//           concatenatedChunks.set(chunk, offset);\r\n//           offset += chunk.length;\r\n//         }\r\n\r\n//         // Create a Blob from the concatenated chunks\r\n//         const videoBlob = new Blob([concatenatedChunks], { type: \"video/mp4\" });\r\n\r\n//         // Create a Blob URL\r\n//         const videoUrl = URL.createObjectURL(videoBlob);\r\n\r\n//         // Set the video element's src attribute to the Blob URL\r\n//         videoRef.current.src = videoUrl;\r\n\r\n//     };\r\n\r\n//     return () => {\r\n//       wsRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={videoRef} controls />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoBlob;\r\n\r\n// //////////////////dane przychodza ale nie odtwarza video\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// function VideoPlayer() {\r\n//   const videoRef = useRef(null);\r\n//   const wsRef = useRef(null);\r\n//   const mediaSourceRef = useRef(null);\r\n//   const sourceBufferRef = useRef(null);\r\n//   const bufferQueueRef = useRef([]);\r\n//   const isAppendingRef = useRef(false);\r\n//   const isSourceOpenRef = useRef(false);\r\n\r\n//   useEffect(() => {\r\n//     wsRef.current = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//     wsRef.current.onmessage = (event) => {\r\n//       console.log(event)\r\n//       if (typeof event.data === \"string\") {\r\n//         console.log(\"string\")\r\n//         const message = JSON.parse(event.data);\r\n\r\n//         if (message.type === \"metadata\") {\r\n//           console.log(\"metadata\")\r\n//           const mediaSource = new MediaSource();\r\n//           videoRef.current.src = URL.createObjectURL(mediaSource);\r\n//           mediaSourceRef.current = mediaSource;\r\n\r\n//           mediaSource.addEventListener(\"sourceopen\", handleSourceOpen);\r\n//           mediaSource.addEventListener(\"sourceended\", handleSourceEnded);\r\n//           mediaSource.addEventListener(\"error\", handleSourceError);\r\n//         }\r\n//       } else if (event.data instanceof Blob && sourceBufferRef.current) {\r\n//         console.log(\"third\")\r\n//         const videoData = event.data;\r\n//         bufferQueueRef.current.push(videoData);\r\n\r\n//         processBufferQueue();\r\n//       }\r\n//     };\r\n\r\n//     return () => {\r\n//       wsRef.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSourceOpen = () => {\r\n//     const mediaSource = mediaSourceRef.current;\r\n//     const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\r\n//     sourceBufferRef.current = sourceBuffer;\r\n//     isSourceOpenRef.current = true;\r\n\r\n//     sourceBuffer.addEventListener(\"updateend\", processBufferQueue);\r\n//   };\r\n\r\n//   const handleSourceEnded = () => {\r\n//     console.log(\"MediaSource ended\");\r\n//   };\r\n\r\n//   const handleSourceError = (error) => {\r\n//     console.error(\"MediaSource error:\", error);\r\n//   };\r\n//   const processBufferQueue = async () => {\r\n//     if (isSourceOpenRef.current && !isAppendingRef.current && bufferQueueRef.current.length > 0) {\r\n//       const videoData = bufferQueueRef.current.shift();\r\n//       isAppendingRef.current = true;\r\n\r\n//       try {\r\n//         const response = await fetch(URL.createObjectURL(videoData));\r\n//         const arrayBuffer = await response.arrayBuffer();\r\n//         sourceBufferRef.current.appendBuffer(arrayBuffer);\r\n//       } catch (error) {\r\n//         console.error(\"Error appending video data to SourceBuffer:\", error);\r\n//         isAppendingRef.current = false;\r\n//         processBufferQueue();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={videoRef} controls />\r\n//     </div>\r\n//   );\r\n// }\r\n// export default VideoPlayer;\r\n\r\n// /////////////17.07 decoding works fine\r\nimport React, { useEffect, useRef,useState } from \"react\";\r\n\r\nconst VideoPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  const websocketRef = useRef(null);\r\n  const [videoURL, setVideoURL] = useState(null);\r\n  // const base64Data = \"\"\r\n  // useEffect(() => {\r\n  //   if (videoRef.current && base64Data) {\r\n  //     // Decode the base64 data\r\n  //     const binaryData = atob(base64Data);\r\n  //     // Convert the binary data to a Uint8Array buffer\r\n  //     const arrayBuffer = new Uint8Array(binaryData.length);\r\n  //     for (let i = 0; i < binaryData.length; i++) {\r\n  //       arrayBuffer[i] = binaryData.charCodeAt(i);\r\n  //     }\r\n\r\n  //     // Create a Blob from the Uint8Array buffer\r\n  //     const videoBlob = new Blob([arrayBuffer], { type: 'video/mp4' });\r\n\r\n  //     // Create an object URL from the Blob\r\n  //     const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n  //     // Set the video source to the object URL\r\n  //     videoRef.current.src = videoURL;\r\n\r\n  //     // Play the video\r\n  //     videoRef.current.play();\r\n  //   }\r\n  // }, [base64Data]);\r\n// ///////////////////////////////\r\n  // useEffect(() => {\r\n  //   // Create a WebSocket connection\r\n  //   const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n  //   socket.onopen = () => {\r\n  //     console.log(\"Connected to server\");\r\n  //   };\r\n\r\n  //   socket.onmessage = (event) => {\r\n  //     // Receive video data from the server\r\n  //     const data = event.data;\r\n  //     videoRef.current.src = URL.createObjectURL(data);\r\n  //   };\r\n\r\n  //   socket.onclose = () => {\r\n  //     console.log(\"Disconnected from server\");\r\n  //   };\r\n\r\n  //   websocketRef.current = socket;\r\n  //   console.log({ socket });\r\n\r\n  //   return () => {\r\n  //     // Clean up the WebSocket connection\r\n  //     websocketRef.current.close();\r\n  //   };\r\n  // }, []);\r\n  // //////////////////////\r\n  useEffect(() => {\r\n    // Create a WebSocket connection\r\n    const socket = new WebSocket(\"ws://localhost:8080\");\r\n\r\n    socket.onopen = () => {\r\n      console.log(\"Connected to server\");\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      // Receive video data from the server\r\n      const data = event.data;\r\n      const fileReader = new FileReader();\r\n\r\n      // Set up the onload event to handle the result when it's ready\r\n      fileReader.onload = function(event) {\r\n        // The result contains the Base64 encoded data\r\n        const base64Datas = event.target.result;\r\n        // const base64Data = \"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\"\r\n        const base64Data = base64Datas.replace(/^data:application\\/octet-stream;base64,/, '');\r\n        //  const base64Data = \"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\"\r\n        console.log(base64Data);\r\n        const binaryData = atob(base64Data);\r\nconsole.log(binaryData)\r\n      // Convert the binary data to a Uint8Array buffer\r\n      const arrayBuffer = new Uint8Array(binaryData.length);\r\n      for (let i = 0; i < binaryData.length; i++) {\r\n        arrayBuffer[i] = binaryData.charCodeAt(i);\r\n      }\r\nconsole.log(arrayBuffer)\r\n      // Create a Blob from the Uint8Array buffer\r\n      const videoBlob = new Blob([arrayBuffer],  {type: 'video/mp4;  codecs=avc1.42E01E, mp4a.40.2'});\r\n     \r\n      // Create an object URL from the Blob\r\n      const videoURL = URL.createObjectURL(videoBlob);\r\n\r\n      setVideoURL(videoURL);\r\n      // Set the video source to the object URL\r\n      // videoRef.current.src = videoURL;\r\n\r\n      // videoRef.current.play();\r\n       \r\n      };\r\n      // Read the Blob data as Base64\r\n      fileReader.readAsDataURL(data);\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log(\"Disconnected from server\");\r\n    };\r\n\r\n    websocketRef.current = socket;\r\n\r\n    return () => {\r\n      // Clean up the WebSocket connection\r\n      websocketRef.current.close();\r\n    };\r\n  }, []);\r\n  const handlePlayVideo = () => {\r\n    if (videoURL) {\r\n      // Play the video if the URL is available\r\n      videoRef.current.src = videoURL;\r\n      videoRef.current.play()\r\n        .catch(error => {\r\n          console.error(\"Error while playing video:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    {/* Video element with controls */}\r\n    <video ref={videoRef} controls />\r\n\r\n    {/* Play button */}\r\n    <button onClick={handlePlayVideo}>Play Video</button>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n\r\n// REACTPLAYER for hls\r\n\r\n// import ReactPlayer from 'react-player';\r\n// import React, { useEffect, useRef } from \"react\";\r\n\r\n// const VideoPlayer = () => {\r\n//   //   const videoRef = useRef(null);\r\n//   // const websocketRef = useRef(null);\r\n\r\n//   //  useEffect(() => {\r\n//   //   // Create a WebSocket connection\r\n//   //   const socket = new WebSocket(\"ws://localhost:8000\");\r\n\r\n//   //   socket.onopen = () => {\r\n//   //     console.log(\"Connected to server\");\r\n//   //   };\r\n\r\n//   //   socket.onmessage = (event) => {\r\n//   //     // Receive video data from the server\r\n//   //     const data = event.data;\r\n//   //     videoRef.current.src = URL.createObjectURL(data);\r\n//   //   };\r\n\r\n//   //   socket.onclose = () => {\r\n//   //     console.log(\"Disconnected from server\");\r\n//   //   };\r\n\r\n//   //   websocketRef.current = socket;\r\n//   //   console.log({ socket });\r\n\r\n//   //   return () => {\r\n//   //     // Clean up the WebSocket connection\r\n//   //     websocketRef.current.close();\r\n//   //   };\r\n//   // }, []);\r\n//   return (\r\n//     <ReactPlayer\r\n//       // url='<https://www.youtube.com/watch?v=dQw4w9WgXcQ>'\r\n//       // url='https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'\r\n//       // url='http://192.168.128.149:8888/startvideo/?token=test&deviceid=2'\r\n//       url=\"http://localhost:8000\"\r\n//       controls\r\n//       playing\r\n//       width=\"100%\"\r\n//       height=\"auto\"\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default VideoPlayer;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAACC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMO,YAAY,GAAGP,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}